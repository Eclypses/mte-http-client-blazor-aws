// Copyright (c) Eclypses, Inc.
//
// All rights reserved.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

/** Status. */
export enum MteStatus {
/** Copyright (c) Eclypses, Inc. */
/**  */
/** All rights reserved. */
/**  */
/** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS */
/** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF */
/** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. */
/** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY */
/** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, */
/** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE */
/** SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

/** WARNING: This file is automatically generated. Do not edit. */



/** Status codes. */
 

  /** No error occurred. */
  mte_status_success,

  /** Invalid input. */
  mte_status_invalid_input,

  /** Unsupported operation. */
  mte_status_unsupported,

  /** A normal DRBG error occurred. NIST SP 800-90A section 9. */
  mte_status_drbg_error,

  /** A catastrophic DRBG error occurred. NIST SP 800-90A section 9. */
  mte_status_drbg_catastrophic,

  /** The seedlife has been reached. NIST SP 800-90A section 9.3.1. */
  mte_status_drbg_seedlife_reached,

  /** A cipher algorithm self-test failed. */
  mte_status_cipher_test_failed,

  /** A hash algorithm self-test failed. */
  mte_status_hash_test_failed,

  /** Output is inhibited due to an error state or self-test. */
  mte_status_output_inhibited,

  /** Implementation error. */
  mte_status_impl_error,

  /** License error. */
  mte_status_license_error,

  /** No such token exists. */
  mte_status_token_does_not_exist,

  /** Checksum mismatch. */
  mte_status_checksum_mismatch,

  /** Hash digest mismatch. */
  mte_status_digest_mismatch,

  /** The message was received too long before/after it was sent. */
  mte_status_time_before_exceeded,
  mte_status_time_after_exceeded,

  /** The sequence number is outside the window. */
  mte_status_seq_outside_window,

  /** The sequence number has already been seen in async mode. */
  mte_status_seq_async_replay,

  /** Attempting to sync up a sequencing variation resulted in a bad */
  /** message. The state has been rolled back to where it was before the */
  /** message arrived. */
  mte_status_seq_mismatch
 



}

/** DRBGs. */
export enum MteDrbgs {
/** Copyright (c) Eclypses, Inc. */
/**  */
/** All rights reserved. */
/**  */
/** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS */
/** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF */
/** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. */
/** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY */
/** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, */
/** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE */
/** SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

/** WARNING: This file is automatically generated. Do not edit. */



/** Deterministic Random Bit Generator algorithms. */
 

  /** None. An external DRBG must be provided instead. */
  mte_drbgs_none,

  /** Increment. The next "random" number is one more than the previous. */
  /** This provides no security and is meant for testing only. */
  mte_drbgs_increment,

  /** NIST CTR DRBG using AES-128 with derivation function. */
  mte_drbgs_ctr_aes128_df,

  /** NIST CTR DRBG using AES-128 with no derivation function. */
  mte_drbgs_ctr_aes128_nodf,

  /** NIST CTR DRBG using AES-192 with derivation function. */
  mte_drbgs_ctr_aes192_df,

  /** NIST CTR DRBG using AES-192 with no derivation function. */
  mte_drbgs_ctr_aes192_nodf,

  /** NIST CTR DRBG using AES-256 with derivation function. */
  mte_drbgs_ctr_aes256_df,

  /** NIST CTR DRBG using AES-256 with no derivation function. */
  mte_drbgs_ctr_aes256_nodf,

  /** NIST Hash DRBG using SHA-1. */
  mte_drbgs_hash_sha1,

  /** NIST Hash DRBG using SHA-256. */
  mte_drbgs_hash_sha256,

  /** NIST Hash DRBG using SHA-512. */
  mte_drbgs_hash_sha512
 



}

/** Verifiers. */
export enum MteVerifiers {
/** Copyright (c) Eclypses, Inc. */
/**  */
/** All rights reserved. */
/**  */
/** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS */
/** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF */
/** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. */
/** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY */
/** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, */
/** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE */
/** SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

/** WARNING: This file is automatically generated. Do not edit. */



/** Message verifiers. */
 

  /** None. */
  mte_verifiers_none,

  /** CRC-32 checksum of data. */
  mte_verifiers_crc32,

  /** CRC-32 checksum of data and sequencing. */
  mte_verifiers_crc32_seq,

  /** Sequencing. */
  mte_verifiers_seq,

  /** 64-bit timestamp. */
  mte_verifiers_t64,

  /** 64-bit timestamp and CRC-32 checksum of data and timestamp. */
  mte_verifiers_t64_crc32,

  /** 64-bit timestamp, CRC-32 checksum of data and timestamp, and */
  /** sequencing. */
  mte_verifiers_t64_crc32_seq,

  /** 64-bit timestamp and sequencing. */
  mte_verifiers_t64_seq
 




}

/** Ciphers. */
export enum MteCiphers {
/** Copyright (c) Eclypses, Inc. */
/**  */
/** All rights reserved. */
/**  */
/** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS */
/** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF */
/** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. */
/** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY */
/** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, */
/** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE */
/** SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

/** WARNING: This file is automatically generated. Do not edit. */



/** Cipher algorithms. */
 

  /** None. An external cipher must be provided instead. */
  mte_ciphers_none,

  /** AES-128-CTR. */
  mte_ciphers_aes128_ctr,

  /** AES-192-CTR. */
  mte_ciphers_aes192_ctr,

  /** AES-256-CTR. */
  mte_ciphers_aes256_ctr

 



}

/** Hashes. */
export enum MteHashes {
/** Copyright (c) Eclypses, Inc. */
/**  */
/** All rights reserved. */
/**  */
/** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS */
/** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF */
/** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. */
/** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY */
/** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, */
/** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE */
/** SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

/** WARNING: This file is automatically generated. Do not edit. */



/** Hash algorithms. */
 

  /** None. An external hash may be provided instead. */
  mte_hashes_none,

  /** CRC-32 */
  mte_hashes_crc32,

  /** SHA-1 */
  mte_hashes_sha1,

  /** SHA-256 */
  mte_hashes_sha256,

  /** SHA-512 */
  mte_hashes_sha512
 



}

/** Init info. */
export enum MteInitInfo {
/** Copyright (c) Eclypses, Inc. */
/**  */
/** All rights reserved. */
/**  */
/** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS */
/** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF */
/** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. */
/** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY */
/** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, */
/** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE */
/** SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

/** WARNING: This file is automatically generated. Do not edit. */



/** Init info requests. */
 

  /** ARM64: is the AES extension present? Return 0 if not or non-zero if */
  /**        it is. This is only requested if it wasn't able to be */
  /**        determined automatically. */
  mte_init_info_arm64_aes_paa,

  /** ARM64: is the SHA-1 extension present? Return 0 if not or non-zero */
  /**        if it is. This is only requested if it wasn't able to be */
  /**        determined automatically. */
  mte_init_info_arm64_sha1_paa,

  /** ARM64: is the SHA-256 extension present? Return 0 if not or non-zero */
  /**        if it is. This is only requested if it wasn't able to be */
  /**        determined automatically. */
  mte_init_info_arm64_sha256_paa,

  /** ARM64: is the SHA-512 extension present? Return 0 if not or non-zero */
  /**        if it is. This is only requested if it wasn't able to be */
  /**        determined automatically. */
  mte_init_info_arm64_sha512_paa,

  /** ARM64: is the CRC-32 extension present? Return 0 if not or non-zero */
  /**        if it is. This is only requested if it wasn't able to be */
  /**        determined automatically. */
  mte_init_info_arm64_crc32_paa
 



}

/** A byte array and status. */
export interface MteArrStatus {
  arr: Uint8Array | null;
  status: MteStatus;
}

/** A string and status. */
export interface MteStrStatus {
  str: string | null;
  status: MteStatus;
}

/** Common MTE functionality.
 *
 * To use, create an instance of a derived object, passing the WASM helper which
 * has been instantiated and the options. */
export class MteBase {
  /** Instances. */
  static readonly instances: MteBase[] = [];

  /** The WASM helper. */
  readonly wasm: MteWasm;
  readonly exports: MteWasmExports;
  readonly memory: WebAssembly.Memory;

  /** Instance index. */
  protected instance: number;

  /** Options. */
  private drbg: MteDrbgs = MteDrbgs.mte_drbgs_none;
  private tokBytes: number = 0;
  private verifiers: MteVerifiers = MteVerifiers.mte_verifiers_none;
  private cipher: MteCiphers = MteCiphers.mte_ciphers_none;
  private hash_: MteHashes = MteHashes.mte_hashes_none;

  /** Instantiation inputs. */
  private entropyInput: MteMem = new MteMem();
  private nonce: Uint8Array | null = null;

  /** Nonce length when set as an integer. */
  private nonceIntBytes: number = 0;

  /** Callback overrides. */
  private eiCallback: MteEntropyCallback | null = null;
  private nCallback: MteNonceCallback | null = null;
  private tsCallback: MteTimestampCallback | null = null;

  /** True if MTE is initialized or false if not. */
  private static mteInitialized: boolean = false;

  /** Constructor. Derived classes must call initBase() from their
      constructor. */
  constructor(wasm: MteWasm) {
    // Reference the WASM.
    this.wasm = wasm;
    if (wasm.exports !== null) {
      this.exports = wasm.exports;
    } else {
      throw new TypeError("MteBase: WASM does not have exports.");
    }
    if (wasm.memory !== null) {
      this.memory = wasm.memory;
    } else {
      throw new TypeError("MteBase: WASM does not have memory.");
    }

    // Set the WASM callbacks.
    if (wasm.entropyCallback === null) {
      wasm.entropyCallback = this.entropyCallback;
    }
    if (wasm.nonceCallback === null) {
      wasm.nonceCallback = this.nonceCallback;
    }
    if (wasm.timestampCallback === null) {
      wasm.timestampCallback = this.timestampCallback;
    }

    // Register the instance.
    this.instance = MteBase.instances.length;
    MteBase.instances.push(this);

    // Initialize MTE.
    if (!MteBase.mteInitialized) {
      // Do global init.
      if (this.exports.mte_init(0, 0) == 0) {
        throw new Error("MteBase: MTE init error.");
      }
    }
  }

  /** Initialize. Derived classes must call this from their constructor. */
  initBase = (drbg: MteDrbgs,
              tokBytes: number,
              verifiers: MteVerifiers,
              cipher: MteCiphers,
              hash_: MteHashes): void => {
    // Set options.
    this.drbg = drbg;
    this.tokBytes = tokBytes;
    this.verifiers = verifiers;
    this.cipher = cipher;
    this.hash_ = hash_;

    // The ideal nonce length is the size of the nonce integer, but it must be
    // at least the minimum for the DRBG and no more than the maximum for the
    // DRBG.
    this.nonceIntBytes = Math.max(this.getDrbgsNonceMinBytes(drbg),
                                  Math.min(8,
                                           this.getDrbgsNonceMaxBytes(drbg)));
  }

  /** Destruct. The WASM memory will be freed. Derived classes must call this
   *  from their destruct method. */
  destructBase = (): void => {
    this.wasm.free(this.entropyInput); this.entropyInput.invalidate();
  }

  /** Returns the MTE version number as a string or individual integer
   *  parts. */
  getVersion = (): string => {
    const off = this.exports.mte_base_version();
    return this.wasm.wasmOffToStr(off);
  }
  getVersionMajor = (): number => {
    return this.exports.mte_wasm_base_version_major();
  }
  getVersionMinor = (): number => {
    return this.exports.mte_wasm_base_version_minor();
  }
  getVersionPatch = (): number => {
    return this.exports.mte_wasm_base_version_patch();
  }

  /** Initialize with the company name and license code. Returns true if
   *  successful or false if not. If true is returned, MTE functions are usable;
   *  otherwise functions that return a status will return an error status. */
  initLicense = (company: string, license: string): boolean => {
    const wcompany = this.wasm.strToWasm(company);
    const wlicense = this.wasm.strToWasm(license);
    const ret = this.exports.mte_license_init(wcompany.off, wlicense.off);
    this.wasm.free(wcompany);
    this.wasm.free(wlicense);
    return ret;
  }

  /** Returns the count of status codes. */
  getStatusCount = (): number => {
    return this.exports.mte_wasm_base_status_count();
  }

  /** Returns the enumeration name for the given status. */
  getStatusName = (status_: MteStatus): string => {
    const off = this.exports.mte_wasm_base_status_name(status_);
    return this.wasm.wasmOffToStr(off);
  }

  /** Returns the description for the given status. */
  getStatusDescription = (status_: MteStatus): string => {
    const off = this.exports.mte_wasm_base_status_description(status_);
    return this.wasm.wasmOffToStr(off);
  }

  /** Returns the status code for the given enumeration name. */
  getStatusCode = (name: string): MteStatus => {
    const wname = this.wasm.strToWasm(name);
    const status_ = this.exports.mte_wasm_base_status_code(wname.off);
    this.wasm.free(wname);
    return status_;
  }

  /** Returns true if the status code is an error, false if it is success or a
   *  warning. */
  statusIsError = (status_: MteStatus): boolean => {
    return this.exports.mte_base_status_is_error(status_);
  }

  /** Returns true if runtime options are available or false if not. */
  hasRuntimeOpts = (): boolean => {
    return this.exports.mte_wasm_base_has_runtime_opts();
  }

  /** Returns the default DRBG. If runtime options are not available, this is
   *  the only option available; otherwise it is a suitable default. */
  getDefaultDrbg = (): MteDrbgs => {
    return this.exports.mte_wasm_base_default_drbg();
  }

  /** Returns the default token size. If runtime options are not available,
   *  this is the only option available; otherwise it is a suitable default. */
  getDefaultTokBytes = (): number => {
    return this.exports.mte_wasm_base_default_tok_bytes();
  }

  /** Returns the default verifiers. If runtime options are not available,
   *  this is the only option available; otherwise it is a suitable default. */
  getDefaultVerifiers = (): MteVerifiers => {
    return this.exports.mte_wasm_base_default_verifiers();
  }

  /** Returns the default cipher. If runtime options are not available, this is
   *  the only option available; otherwise it is a suitable default. */
  getDefaultCipher = (): MteCiphers => {
    return this.exports.mte_wasm_base_default_cipher();
  }

  /** Returns the default hash. If runtime options are not available, this is
   *  the only option available; otherwise it is a suitable default. */
  getDefaultHash = (): MteHashes => {
    return this.exports.mte_wasm_base_default_hash();
  }

  /** Returns the count of DRBG algorithms. */
  getDrbgsCount = (): number => {
    return this.exports.mte_wasm_base_drbgs_count();
  }

  /** Returns the enumeration name for the given algorithm. */
  getDrbgsName = (algo: MteDrbgs): string => {
    const off = this.exports.mte_wasm_base_drbgs_name(algo);
    return this.wasm.wasmOffToStr(off);
  }

  /** Returns the algorithm for the given enumeration name. */
  getDrbgsAlgo = (name: string): MteDrbgs => {
    const wname = this.wasm.strToWasm(name);
    const algo = this.exports.mte_wasm_base_drbgs_algo(wname.off);
    this.wasm.free(wname);
    return algo;
  }

  /** Returns the security strength for the given algorithm. */
  getDrbgsSecStrengthBytes = (algo: MteDrbgs): number => {
    return this.exports.mte_wasm_base_drbgs_sec_strength_bytes(algo);
  }

  /** Returns the minimum personalization string size for the given
   *  algorithm. */
  getDrbgsPersonalMinBytes = (algo: MteDrbgs): number => {
    return this.exports.mte_wasm_base_drbgs_personal_min_bytes(algo);
  }

  /** Returns the maximum personalization string size for the given
   *  algorithm. */
   getDrbgsPersonalMaxBytes = (algo: MteDrbgs): number => {
    return this.exports.mte_wasm_base_drbgs_personal_max_bytes(algo);
  }

  /** Returns the minimum entropy size for the given algorithm. */
  getDrbgsEntropyMinBytes = (algo: MteDrbgs): number => {
    return this.exports.mte_wasm_base_drbgs_entropy_min_bytes(algo);
  }

  /** Returns the maximum entropy size for the given algorithm. */
  getDrbgsEntropyMaxBytes = (algo: MteDrbgs): number => {
    return this.exports.mte_wasm_base_drbgs_entropy_max_bytes(algo);
  }

  /** Returns the minimum nonce size for the given algorithm. */
  getDrbgsNonceMinBytes = (algo: MteDrbgs): number => {
    return this.exports.mte_wasm_base_drbgs_nonce_min_bytes(algo);
  }

  /** Returns the maximum nonce size for the given algorithm. */
  getDrbgsNonceMaxBytes = (algo: MteDrbgs): number => {
    return this.exports.mte_wasm_base_drbgs_nonce_max_bytes(algo);
  }

  /** Returns the reseed interval for the given algorithm. */
  getDrbgsReseedInterval = (algo: MteDrbgs): number => {
    return this.exports.mte_wasm_base_drbgs_reseed_interval(algo);
  }

  /** Set the increment DRBG to return an error during instantiation and
   *  uninstantiation (if true) or not (if false). This is useful for testing
   *  error handling. The flag is false until set with this. */
  setIncrInstError = (flag: boolean): void => {
    this.exports.mte_wasm_base_drbgs_incr_inst_error(flag);
  }

  /** Set the increment DRBG to produce an error after the given number of
   *  values have been generated (if flag is true) or turn off errors (if flag
   *  is false) other than the reseed error, which is always produced when the
   *  seed interval is reached. The flag is false until set with this. */
  setIncrGenError = (flag: boolean, after: number): void => {
    this.exports.mte_wasm_base_drbgs_incr_gen_error(flag, after);
  }

  /** Returns the count of verifier algorithms. */
  getVerifiersCount = (): number => {
    return this.exports.mte_wasm_base_verifiers_count();
  }

  /** Returns the enumeration name for the given algorithm. */
  getVerifiersName = (algo: MteVerifiers): string => {
    const off = this.exports.mte_wasm_base_verifiers_name(algo);
    return this.wasm.wasmOffToStr(off);
  }

  /** Returns the algorithm for the given enumeration name. */
  getVerifiersAlgo = (name: string): MteVerifiers => {
    const wname = this.wasm.strToWasm(name);
    const algo = this.exports.mte_wasm_base_verifiers_algo(wname.off);
    this.wasm.free(wname);
    return algo;
  }

  /** Returns the count of cipher algorithms. */
  getCiphersCount = (): number => {
    return this.exports.mte_wasm_base_ciphers_count();
  }

  /** Returns the enumeration name for the given algorithm. */
  getCiphersName = (algo: MteCiphers): string => {
    // Get the name. Create an array overlaying the WASM memory starting at that
    // location. Convert to JS string.
    const off = this.exports.mte_wasm_base_ciphers_name(algo);
    return this.wasm.wasmOffToStr(off);
  }

  /** Returns the algorithm for the given enumeration name. */
  getCiphersAlgo = (name: string): MteCiphers => {
    // Convert the string to UTF-8 in WASM memory, get the algorithm, and free
    // the WASM memory.
    const wname = this.wasm.strToWasm(name);
    const algo = this.exports.mte_wasm_base_ciphers_algo(wname.off);
    this.wasm.free(wname);
    return algo;
  }

  /** Returns the block size for the given algorithm. */
  getCiphersBlockBytes = (algo: MteCiphers): number => {
    return this.exports.mte_wasm_base_ciphers_block_bytes(algo);
  }

  /** Returns the count of hash algorithms. */
  getHashesCount = (): number => {
    return this.exports.mte_wasm_base_hashes_count();
  }

  /** Returns the enumeration name for the given algorithm. */
  getHashesName = (algo: MteHashes): string => {
    // Get the name. Create an array overlaying the WASM memory starting at that
    // location. Convert to JS string.
    const off = this.exports.mte_wasm_base_hashes_name(algo);
    return this.wasm.wasmOffToStr(off);
  }

  /** Returns the algorithm for the given enumeration name. */
  getHashesAlgo = (name: string): MteHashes => {
    // Convert the string to UTF-8 in WASM memory, get the algorithm, and free
    // the WASM memory.
    const wname = this.wasm.strToWasm(name);
    const algo = this.exports.mte_wasm_base_hashes_algo(wname.off);
    this.wasm.free(wname);
    return algo;
  }

  /** Return the options in use. */
  getDrbg = (): MteDrbgs => {
    return this.drbg;
  }
  getTokBytes = (): number => {
    return this.tokBytes;
  }
  getVerifiers = (): MteVerifiers => {
    return this.verifiers;
  }
  getCipher = (): MteCiphers => {
    return this.cipher;
  }
  getHash = (): MteHashes => {
    return this.hash_;
  }

  /** Set the entropy callback. If not null, it is called to get entropy. If
   *  null, the entropy set with setEntropyArr(), setEntropyStr(), or
   *  setEntropyB64() is used. */
  setEntropyCallback = (cb: MteEntropyCallback | null): void => {
    this.eiCallback = cb;
  }

  /** Set the entropy input value. This must be done before calling
   *  an instantiation method that will trigger the entropy callback.
   *
   *  The entropy is zeroized immediately.
   *
   *  If the entropy callback is null, entropyInput is used as the entropy. */
  setEntropyArr = (entropyInput: Uint8Array): void => {
    // Copy to WASM memory.
    this.wasm.free(this.entropyInput);
    this.entropyInput = this.wasm.arrToWasm(entropyInput);

    // Zeroize.
    for (let i = 0; i < entropyInput.length; ++i) {
      entropyInput[i] = 0;
    }
  }

  /** Calls setEntropyArr() with the entropy converted to an array of bytes in
   *  UTF-8 encoding.
   *
   *  WARNING: the entropy is not zeroized because a 'string' object is read-
   *  only. */
  setEntropyStr = (entropyInput: string): void => {
    // Convert the string to UTF-8 in WASM memory.
    this.wasm.free(this.entropyInput);
    this.entropyInput = this.wasm.strToWasm(entropyInput);
  }

  /** Calls setEntropyArr() with the Base64-decoded version of entropyInput.
   *
   *  WARNING: the entropy is not zeroized because a 'string' object is read-
   *  only. */
  setEntropyB64 = (entropyInput: string): void => {
    // Decode Base64 in WASM memory. Set the decoded size.
    this.wasm.free(this.entropyInput);
    this.entropyInput = this.wasm.strToWasm(entropyInput);
    const bytes = this.exports.mte_wasm_base64_decode(this.entropyInput.off);
    this.entropyInput.used = bytes;
  }

  /** Set the nonce callback. If not null, it is called to get the nonce. If
   *  null, the nonce set with setNonceArr() or setNonce() is used. */
  setNonceCallback = (cb: MteNonceCallback | null): void => {
    this.nCallback = cb;
  }

  /** Set the nonce. This must be done before calling an instantiation method
   *  that will trigger the nonce callback.
   *
   *  If the nonce callback is null, it is used as the nonce. */
  setNonceArr = (nonce: Uint8Array): void => {
    this.nonce = nonce;
  }

  /** Calls setNonceArr() with the nonce interpreted as a 64-bit integer in
   *  decimal using the value as an array of bytes in little endian format. */
  setNonce = (nonce: string): void => {
    // Create an array of the ideal size, then convert the decimal string to
    // that array in little endian, supporting a full 64-bit range.
    const arr = new Uint8Array(this.nonceIntBytes);
    for (let i = 0; i < nonce.length; ++i) {
      let carry = parseInt(nonce.charAt(i));
      for (let j = 0; j < arr.length; ++j) {
        let digit = (arr[j] * 10) + carry;
        arr[j] = digit % 256;
        carry = Math.floor(digit / 256);
      }
    }

    // Set that array as the nonce.
    this.setNonceArr(arr);
  }

  /** Set the timestamp callback. If not null, it is called to get the
   *  timestamp. If null, 0 is used. */
  setTimestampCallback = (cb: MteTimestampCallback | null): void => {
    this.tsCallback = cb;
  }

  /** The entropy callback. */
  entropyCallback = (context: number,
                     minEntropy: number,
                     minLength: number,
                     maxLength: number,
                     entropyInput: number,
                     eiBytes: number): MteStatus => {
    // Get the MTE instance.
    const theThis = MteBase.instances[context];

    // Call the override callback if set.
    if (theThis.eiCallback) {
      return theThis.eiCallback.entropyCallback(minEntropy,
                                                minLength,
                                                maxLength,
                                                entropyInput,
                                                eiBytes);
    }

    // Check the length.
    if (theThis.entropyInput.used < minLength ||
        theThis.entropyInput.used > maxLength) {
      return MteStatus.mte_status_drbg_catastrophic;
    }

    // Point at the entropy in WASM memory.
    theThis.wasm.intToWasm(entropyInput, theThis.entropyInput.off);

    // Set the length.
    theThis.wasm.intToWasm(eiBytes, theThis.entropyInput.used);

    // Success.
    return MteStatus.mte_status_success;
  }

  /** The nonce callback. */
  nonceCallback = (context: number,
                   minLength: number,
                   maxLength: number,
                   nonce: number,
                   nBytes: number): void => {
    // Get the MTE instance.
    const theThis = MteBase.instances[context];

    // Call the override callback if set.
    if (theThis.nCallback) {
      theThis.nCallback.nonceCallback(minLength, maxLength, nonce, nBytes);
      return;
    }

    // Check that the nonce was set.
    if (theThis.nonce == null) {
      theThis.wasm.intToWasm(nBytes, 0);
      return;
    }

    // Copy the nonce to the WASM-provided buffer.
    this.wasm.arrToOffLen(theThis.nonce, nonce, theThis.nonce.length);

    // Set the length.
    theThis.wasm.intToWasm(nBytes, theThis.nonce.length);
  }

  /** Timestamp callback. */
  timestampCallback = (context: number, tsOff: number): void => {
    // Get the MTE instance.
    const theThis = MteBase.instances[context];

    // Call the override callback if set. Otherwise it defaults to 0.
    let ts = { ts: 0, upper: 0 };
    if (theThis.tsCallback) {
      ts = theThis.tsCallback.timestampCallback();
    }

    // Set the timestamp in WASM. If upper is zero, the entire timestamp is in
    // ts so copy as a 64-bit number.
    if (ts.upper == 0) {
      theThis.wasm.int64ToWasm(tsOff, ts.ts);
    }
    else {
      // Otherwise set the two 32-bit parts in to the 64-bit number.
      theThis.wasm.intToWasm(tsOff, ts.ts);
      theThis.wasm.intToWasm(tsOff + 4, ts.upper);
    }
  }
}

/** This is the MTE encoder.
 *
 *  To use, create an instance passing the WASM helper which has been
 *  instantiated. */
export class MteEnc extends MteBase {
  /** The encoder. */
  protected encoder: MteMem;

  /** Saved state buffers. */
  private saved: MteMem;
  private saved64: MteMem;

  /** Constructor taking the DRBG, token size in bytes, and verifiers
   *  algorithm. */
  constructor(wasm: MteWasm,
              drbg: MteDrbgs | string,
              tokBytes: number,
              verifiers: MteVerifiers | string) {
    // Super.
    super(wasm);

    // Get the DRBG and verifier as enums if they are strings.
    const drbgE = typeof drbg === "string" ?
      this.getDrbgsAlgo(drbg) : drbg;
    const verifiersE = typeof verifiers === "string" ?
      this.getVerifiersAlgo(verifiers) : verifiers;

    // Initialize the base.
    this.initBase(drbgE,
                  tokBytes,
                  verifiersE,
                  MteCiphers.mte_ciphers_none,
                  MteHashes.mte_hashes_none);

    // Get the encoder size.
    const bytes = this.exports.mte_wasm_enc_state_bytes(drbgE,
                                                        tokBytes,
                                                        verifiersE);
    if (bytes == 0) {
      throw new RangeError("MteEnc: Invalid options.");
    }

    // Allocate the encoder.
    this.encoder = wasm.malloc(bytes);

    // Initialize the encoder state.
    const stat = this.exports.mte_wasm_enc_state_init(this.encoder.off,
                                                      drbgE,
                                                      tokBytes,
                                                      verifiersE);
    if (stat != MteStatus.mte_status_success) {
      throw new RangeError("MteEnc: Invalid options.");
    }

    // Saved state.
    this.saved =
      wasm.malloc(this.exports.mte_enc_save_bytes(this.encoder.off));
    this.saved64 =
      wasm.malloc(this.exports.mte_wasm_enc_save_bytes_b64(this.encoder.off));
  }

  /** Create an encoder using default options. */
  public static fromdefault(wasm: MteWasm): MteEnc {
    const base = new MteBase(wasm);
    return new MteEnc(wasm,
                      base.getDefaultDrbg(),
                      base.getDefaultTokBytes(),
                      base.getDefaultVerifiers());
  }

  /** Destruct. The WASM memory will be freed and the object can no longer be
   *  used. */
  destruct = (): void => {
    this.destructBase();
    this.wasm.free(this.encoder); this.encoder.invalidate();
    this.wasm.free(this.saved); this.saved.invalidate();
    this.wasm.free(this.saved64); this.saved64.invalidate();
  }

  /** Instantiate the encoder with the personalization string. The entropy and
   *  nonce callbacks will be called to get the rest of the seeding material.
   *  Returns the status. */
  instantiate = (ps: string): MteStatus => {
    // Create the personalization string in WASM.
    const psWasm = this.wasm.strToWasm(ps);

    // Instantiate.
    const ret = this.exports.mte_wasm_enc_instantiate(this.encoder.off,
                                                      this.instance,
                                                      this.instance,
                                                      psWasm.off, psWasm.used);

    // Free the personalization string.
    this.wasm.free(psWasm);

    // Return the status.
    return ret;
  }

  /** Returns the reseed counter. */
  getReseedCounter = (): number => {
    return this.exports.mte_wasm_enc_reseed_counter(this.encoder.off);
  }

  /** Returns the saved state as a byte array. On error, null is returned. */
  saveState = (): Uint8Array | null => {
    // Save to the save memory. Return the buffer.
    const status = this.exports.mte_enc_state_save(this.encoder.off,
                                                   this.saved.off);
    return status == MteStatus.mte_status_success ?
      new Uint8Array(this.saved.buff!) : null;
  }

  /** Returns the saved state, Base64 encoded. On error, null is returned. */
   saveStateB64 = (): string | null => {
    // Save to the save memory. Return the Base64-encoded string.
    const status = this.exports.mte_wasm_enc_state_save_b64(this.encoder.off,
                                                            this.saved64.off);
    return status == MteStatus.mte_status_success ?
      this.wasm.wasmToStr(this.saved64) : null;
  }

  /** Restore a saved state, which must be the same length as was returned
   *  from the saveState() call. Returns the status. */
  restoreState = (saved: Uint8Array): MteStatus => {
    // Copy to the saved state buffer.
    this.wasm.arrToOffLen(saved, this.saved.off, saved.length);

    // Restore.
    return this.exports.mte_enc_state_restore(this.encoder.off, this.saved.off);
  }

  /** Restore a saved state, which must be the same length as was returned
   *  from the saveStateB64() call. Returns the status. */
   restoreStateB64 = (saved: string): MteStatus => {
    // Copy to the WASM memory.
    const stateWasm = this.wasm.strToWasm(saved);

    // Restore.
    const status = this.exports.mte_wasm_enc_state_restore_b64(this.encoder.off,
                                                               stateWasm.off);

    // Free the WASM memory.
    this.wasm.free(stateWasm);

    // Return status.
    return status;
  }

  /** Encode the given data. Returns the encoded version and status. */
  encode = (data: Uint8Array): MteArrStatus => {
    // Copy the data to the WASM memory.
    const wdata = this.wasm.arrToWasm(data);

    // Allocate the encoder buffers.
    const bytes = this.exports.mte_enc_buff_bytes(this.encoder.off,
                                                  data.length);
    const encBuff = this.wasm.malloc(bytes);
    const eOff = this.wasm.newInt();
    const eBytes = this.wasm.newInt();

    // Encode.
    const ret = this.exports.mte_wasm_enc_encode(this.encoder.off,
                                                 this.instance,
                                                 wdata.off, data.length,
                                                 encBuff.off,
                                                 eOff.off,
                                                 eBytes.off);
    if (ret != MteStatus.mte_status_success) {
      this.wasm.free(wdata);
      this.wasm.free(encBuff);
      this.wasm.free(eOff);
      this.wasm.free(eBytes);
      return { arr: null, status: ret };
    }

    // Copy the encoded data to an array.
    const encOff = this.wasm.wasmToInt(eOff.off);
    const encBytes = this.wasm.wasmToInt(eBytes.off);
    const encoded = encBuff.buff!.slice(encOff, encOff + encBytes);

    // Free the buffers.
    this.wasm.free(wdata);
    this.wasm.free(encBuff);
    this.wasm.free(eOff);
    this.wasm.free(eBytes);

    // Return the encoded version and status.
    return { arr: encoded, status: ret };
  }

  /** Encode the given data, Base64 encoded. Returns the encoded version and
   *  status. */
  encodeB64 = (data: Uint8Array): MteStrStatus => {
    // Copy the data to the WASM memory.
    const wdata = this.wasm.arrToWasm(data);

    // Allocate the encoder buffers.
    const bytes = this.exports.mte_wasm_enc_buff_bytes_b64(this.encoder.off,
                                                           data.length);
    const encBuff = this.wasm.malloc(bytes);
    const eOff = this.wasm.newInt();
    const eBytes = this.wasm.newInt();

    // Encode.
    const ret = this.exports.mte_wasm_enc_encode_b64(this.encoder.off,
                                                     this.instance,
                                                     wdata.off,
                                                     data.length,
                                                     encBuff.off,
                                                     eOff.off,
                                                     eBytes.off);
    if (ret != MteStatus.mte_status_success) {
      this.wasm.free(wdata);
      this.wasm.free(encBuff);
      this.wasm.free(eOff);
      this.wasm.free(eBytes);
      return { str: null, status: ret };
    }

    // Convert to string.
    const encOff = this.wasm.wasmToInt(eOff.off);
    const encoded = this.wasm.wasmToStr(encBuff, encOff);

    // Free the buffers.
    this.wasm.free(wdata);
    this.wasm.free(encBuff);
    this.wasm.free(eOff);
    this.wasm.free(eBytes);

    // Return the encoded version and status.
    return { str: encoded, status: ret };
  }

  /** Encode the given string. Returns the encoded message and status. */
  encodeStr = (str: string): MteArrStatus => {
    // Convert the string to the WASM memory.
    const wdata = this.wasm.strToWasm(str);

    // Allocate the encoder buffers.
    const bytes = this.exports.mte_enc_buff_bytes(this.encoder.off,
                                                  wdata.used);
    const encBuff = this.wasm.malloc(bytes);
    const eOff = this.wasm.newInt();
    const eBytes = this.wasm.newInt();

    // Encode.
    const ret = this.exports.mte_wasm_enc_encode(this.encoder.off,
                                                 this.instance,
                                                 wdata.off, wdata.used,
                                                 encBuff.off,
                                                 eOff.off,
                                                 eBytes.off);
    if (ret != MteStatus.mte_status_success) {
      this.wasm.free(wdata);
      this.wasm.free(encBuff);
      this.wasm.free(eOff);
      this.wasm.free(eBytes);
      return { arr: null, status: ret };
    }

    // Copy the encoded data to an array.
    const encOff = this.wasm.wasmToInt(eOff.off);
    const encBytes = this.wasm.wasmToInt(eBytes.off);
    const encoded = encBuff.buff!.slice(encOff, encOff + encBytes);

    // Free the buffers.
    this.wasm.free(wdata);
    this.wasm.free(encBuff);
    this.wasm.free(eOff);
    this.wasm.free(eBytes);

    // Return the encoded version and status.
    return { arr: encoded, status: ret };
  }

  /** Encode the given string, Base64 encoded. Returns the encoded message and
   *  status. */
  encodeStrB64 = (str: string): MteStrStatus => {
    // Convert the string to the WASM memory.
    const wdata = this.wasm.strToWasm(str);

    // Allocate the encoder buffers.
    const bytes = this.exports.mte_wasm_enc_buff_bytes_b64(this.encoder.off,
                                                           wdata.used);
    const encBuff = this.wasm.malloc(bytes);
    const eOff = this.wasm.newInt();
    const eBytes = this.wasm.newInt();

    // Encode.
    const ret = this.exports.mte_wasm_enc_encode_b64(this.encoder.off,
                                                     this.instance,
                                                     wdata.off,
                                                     wdata.used,
                                                     encBuff.off,
                                                     eOff.off,
                                                     eBytes.off);
    if (ret != MteStatus.mte_status_success) {
      this.wasm.free(wdata);
      this.wasm.free(encBuff);
      this.wasm.free(eOff);
      this.wasm.free(eBytes);
      return { str: null, status: ret };
    }

    // Convert to string.
    const encOff = this.wasm.wasmToInt(eOff.off);
    const encoded = this.wasm.wasmToStr(encBuff, encOff);

    // Free the buffers.
    this.wasm.free(wdata);
    this.wasm.free(encBuff);
    this.wasm.free(eOff);
    this.wasm.free(eBytes);

    // Return the encoded version and status.
    return { str: encoded, status: ret };
  }

  /** Uninstantiate. */
  uninstantiate = (): MteStatus => {
    return this.exports.mte_enc_uninstantiate(this.encoder.off);
  }
}

/** This is the MTE decoder.
 *
 *  To use, create an instance passing the WASM helper which has been
 *  instantiated. */
export class MteDec extends MteBase {
  /** The decoder. */
  protected decoder: MteMem;

  /** Saved state buffers. */
  private saved: MteMem;
  private saved64: MteMem;

  /** Decode values. */
  private encTs: MteTimestamp = { ts: 0, upper: 0 };
  private decTs: MteTimestamp = { ts: 0, upper: 0 };
  private msgSkipped: number = 0;

  /** Constructor taking the DRBG, token size in bytes, verifiers algorithm,
   *  timestamp window, and sequence window. */
  constructor(wasm: MteWasm,
              drbg: MteDrbgs | string,
              tokBytes: number,
              verifiers: MteVerifiers | string,
              tWindow: number,
              sWindow: number) {
    // Super.
    super(wasm);

    // Get the DRBG and verifier as enums if they are strings.
    const drbgE = typeof drbg === "string" ?
      this.getDrbgsAlgo(drbg) : drbg;
    const verifiersE = typeof verifiers === "string" ?
      this.getVerifiersAlgo(verifiers) : verifiers;

    // Initialize the base.
    this.initBase(drbgE,
                  tokBytes,
                  verifiersE,
                  MteCiphers.mte_ciphers_none,
                  MteHashes.mte_hashes_none);

    // Get the decoder size.
    const bytes = this.exports.mte_wasm_dec_state_bytes(drbgE,
                                                        tokBytes,
                                                        verifiersE);
    if (bytes == 0) {
      throw new RangeError("MteDec: Invalid options.");
    }

    // Allocate the decoder.
    this.decoder = wasm.malloc(bytes);

    // Initialize the decoder state.
    const stat = this.exports.mte_wasm_dec_state_init(this.decoder.off,
                                                      drbgE,
                                                      tokBytes,
                                                      verifiersE,
                                                      tWindow,
                                                      sWindow);
    if (stat != MteStatus.mte_status_success) {
      this.wasm.free(this.decoder);
      throw new RangeError("MteDec: Invalid options.");
    }

    // Saved state.
    this.saved =
      wasm.malloc(this.exports.mte_dec_save_bytes(this.decoder.off));
    this.saved64 =
      wasm.malloc(this.exports.mte_wasm_dec_save_bytes_b64(this.decoder.off));
  }

  /** Create a decoder using default options.
   *
   *  The timestamp window and sequence window are optionally settable. */
  public static fromdefault(wasm: MteWasm, tWindow = 0, sWindow = 0): MteDec {
    const base = new MteBase(wasm);
    return new MteDec(wasm,
                      base.getDefaultDrbg(),
                      base.getDefaultTokBytes(),
                      base.getDefaultVerifiers(),
                      tWindow,
                      sWindow);
  }

  /** Destruct. The WASM memory will be freed and the object can no longer be
   *  used. */
  destruct = (): void => {
    this.destructBase();
    this.wasm.free(this.decoder); this.decoder.invalidate();
    this.wasm.free(this.saved); this.saved.invalidate();
    this.wasm.free(this.saved64); this.saved64.invalidate();
  }

  /** Instantiate the decoder with the personalization string. The entropy and
   *  nonce callbacks will be called to get the rest of the seeding material.
   *  Returns the status. */
  instantiate = (ps: string): MteStatus => {
    // Create the personalization string in WASM.
    const psWasm = this.wasm.strToWasm(ps);

    // Instantiate.
    const ret = this.exports.mte_wasm_dec_instantiate(this.decoder.off,
                                                      this.instance,
                                                      this.instance,
                                                      psWasm.off, psWasm.used);

    // Free the personalization string.
    this.wasm.free(psWasm);

    // Return the status.
    return ret;
  }

  /** Returns the reseed counter. */
  getReseedCounter = (): number => {
    return this.exports.mte_wasm_dec_reseed_counter(this.decoder.off);
  }

  /** Returns the saved state as a byte array. On error, null is returned. */
  saveState = (): Uint8Array | null => {
    // Save to the save memory. Return the buffer.
    const status = this.exports.mte_dec_state_save(this.decoder.off,
                                                   this.saved.off);
    return status == MteStatus.mte_status_success ?
      new Uint8Array(this.saved.buff!) : null;
  }

  /** Returns the saved state, Base64 encoded. On error, null is returned. */
   saveStateB64 = (): string | null => {
    // Save to the save memory. Return the Base64-encoded string.
    const status = this.exports.mte_wasm_dec_state_save_b64(this.decoder.off,
                                                            this.saved64.off);
    return status == MteStatus.mte_status_success ?
      this.wasm.wasmToStr(this.saved64) : null;
  }

  /** Restore a saved state, which must be the same length as was returned
   *  from the saveState() call. Returns the status. */
  restoreState = (saved: Uint8Array): MteStatus => {
    // Copy to the saved state buffer.
    this.wasm.arrToOffLen(saved, this.saved.off, saved.length);

    // Restore.
    return this.exports.mte_dec_state_restore(this.decoder.off, this.saved.off);
  }

  /** Restore a saved state, which must be the same length as was returned
   *  from the saveStateB64() call. Returns the status. */
   restoreStateB64 = (saved: string): MteStatus => {
    // Copy to the WASM memory.
    const stateWasm = this.wasm.strToWasm(saved);

    // Restore.
    const status = this.exports.mte_wasm_dec_state_restore_b64(this.decoder.off,
                                                               stateWasm.off);

    // Free the WASM memory.
    this.wasm.free(stateWasm);

    // Return status.
    return status;
  }

  /** Decode the given encoded data. Returns the decoded data and status. */
  decode = (encoded: Uint8Array): MteArrStatus => {
    // Copy the message to the WASM memory.
    const wencoded = this.wasm.arrToWasm(encoded);

    // Allocate the decoder buffers.
    const bytes = this.exports.mte_dec_buff_bytes(this.decoder.off,
                                                  encoded.length);
    const decBuff = this.wasm.malloc(bytes);
    const dOff = this.wasm.newInt();
    const dBytes = this.wasm.newInt();
    const et = this.wasm.newInt64();
    const dt = this.wasm.newInt64();
    const ms = this.wasm.newInt();

    // Decode.
    const ret = this.exports.mte_wasm_dec_decode(this.decoder.off,
                                                 this.instance,
                                                 wencoded.off, encoded.length,
                                                 decBuff.off,
                                                 dOff.off,
                                                 dBytes.off,
                                                 et.off,
                                                 dt.off,
                                                 ms.off);
    if (this.statusIsError(ret)) {
      this.wasm.free(wencoded);
      this.wasm.free(decBuff);
      this.wasm.free(dOff);
      this.wasm.free(dBytes);
      this.wasm.free(et);
      this.wasm.free(dt);
      this.wasm.free(ms);
      return { arr: null, status: ret };
    }

    // Copy the decoded data to an array.
    const decOff = this.wasm.wasmToInt(dOff.off);
    const decBytes = this.wasm.wasmToInt(dBytes.off);
    const decoded = decBuff.buff!.slice(decOff, decOff + decBytes);

    // Get the decode values.
    this.encTs = this.wasm.wasmToTimestamp(et);
    this.decTs = this.wasm.wasmToTimestamp(dt);
    this.msgSkipped = this.wasm.wasmToInt(ms.off);

    // Free the buffers.
    this.wasm.free(wencoded);
    this.wasm.free(decBuff);
    this.wasm.free(dOff);
    this.wasm.free(dBytes);
    this.wasm.free(et);
    this.wasm.free(dt);
    this.wasm.free(ms);

    // Return the decoded data and status.
    return { arr: decoded, status: ret };
  }

  /** Decode the given Base64-encoded encoded data. Returns the decoded data
   *  and status. */
  decodeB64 = (encoded: string): MteArrStatus => {
    // Copy the Base64 to the WASM memory.
    const wencoded = this.wasm.strToWasm(encoded);

    // Allocate the decoder buffers.
    const bytes = this.exports.mte_wasm_dec_buff_bytes_b64(this.decoder.off,
                                                           wencoded.used);
    const decBuff = this.wasm.malloc(bytes);
    const dOff = this.wasm.newInt();
    const dBytes = this.wasm.newInt();
    const et = this.wasm.newInt64();
    const dt = this.wasm.newInt64();
    const ms = this.wasm.newInt();

    // Decode.
    const ret = this.exports.mte_wasm_dec_decode_b64(this.decoder.off,
                                                     this.instance,
                                                     wencoded.off,
                                                     wencoded.used,
                                                     decBuff.off,
                                                     dOff.off,
                                                     dBytes.off,
                                                     et.off,
                                                     dt.off,
                                                     ms.off);
    if (this.statusIsError(ret)) {
      this.wasm.free(wencoded);
      this.wasm.free(decBuff);
      this.wasm.free(dOff);
      this.wasm.free(dBytes);
      this.wasm.free(et);
      this.wasm.free(dt);
      this.wasm.free(ms);
      return { arr: null, status: ret };
    }

    // Copy the decoded data to an array.
    const decOff = this.wasm.wasmToInt(dOff.off);
    const decBytes = this.wasm.wasmToInt(dBytes.off);
    const decoded = decBuff.buff!.slice(decOff, decOff + decBytes);

    // Get the decode values.
    this.encTs = this.wasm.wasmToTimestamp(et);
    this.decTs = this.wasm.wasmToTimestamp(dt);
    this.msgSkipped = this.wasm.wasmToInt(ms.off);

    // Free the buffers.
    this.wasm.free(wencoded);
    this.wasm.free(decBuff);
    this.wasm.free(dOff);
    this.wasm.free(dBytes);
    this.wasm.free(et);
    this.wasm.free(dt);
    this.wasm.free(ms);

    // Return the decoded data and status.
    return { arr: decoded, status: ret };
  }

  /** Decode the given encoded version to a string. Returns the string and
   *  status. */
  decodeStr = (encoded: Uint8Array): MteStrStatus => {
    // Copy the encoded to the WASM memory.
    const wencoded = this.wasm.arrToWasm(encoded);

    // Allocate the decoder buffers.
    const bytes = this.exports.mte_dec_buff_bytes(this.decoder.off,
                                                  encoded.length);
    const decBuff = this.wasm.malloc(bytes);
    const dOff = this.wasm.newInt();
    const dBytes = this.wasm.newInt();
    const et = this.wasm.newInt64();
    const dt = this.wasm.newInt64();
    const ms = this.wasm.newInt();

    // Decode.
    const ret = this.exports.mte_wasm_dec_decode(this.decoder.off,
                                                 this.instance,
                                                 wencoded.off, encoded.length,
                                                 decBuff.off,
                                                 dOff.off,
                                                 dBytes.off,
                                                 et.off,
                                                 dt.off,
                                                 ms.off);
    if (this.statusIsError(ret)) {
      this.wasm.free(wencoded);
      this.wasm.free(decBuff);
      this.wasm.free(dOff);
      this.wasm.free(dBytes);
      this.wasm.free(et);
      this.wasm.free(dt);
      this.wasm.free(ms);
      return { str: null, status: ret };
    }

    // Get the decoded data as a string.
    const decOff = this.wasm.wasmToInt(dOff.off);
    const decoded = this.wasm.wasmToStr(decBuff, decOff);

    // Get the decode values.
    this.encTs = this.wasm.wasmToTimestamp(et);
    this.decTs = this.wasm.wasmToTimestamp(dt);
    this.msgSkipped = this.wasm.wasmToInt(ms.off);

    // Free the buffers.
    this.wasm.free(wencoded);
    this.wasm.free(decBuff);
    this.wasm.free(dOff);
    this.wasm.free(dBytes);
    this.wasm.free(et);
    this.wasm.free(dt);
    this.wasm.free(ms);

    // Return the decoded data and status.
    return { str: decoded, status: ret };
  }

  /** Decode the given Base64-encoded encoded version to a string. Returns the
   *  string and status. */
   decodeStrB64 = (encoded: string): MteStrStatus => {
    // Copy the Base64 to the WASM memory.
    const wencoded = this.wasm.strToWasm(encoded);

    // Allocate the decoder buffers.
    const bytes = this.exports.mte_wasm_dec_buff_bytes_b64(this.decoder.off,
                                                           wencoded.used);
    const decBuff = this.wasm.malloc(bytes);
    const dOff = this.wasm.newInt();
    const dBytes = this.wasm.newInt();
    const et = this.wasm.newInt64();
    const dt = this.wasm.newInt64();
    const ms = this.wasm.newInt();

    // Decode.
    const ret = this.exports.mte_wasm_dec_decode_b64(this.decoder.off,
                                                     this.instance,
                                                     wencoded.off,
                                                     wencoded.used,
                                                     decBuff.off,
                                                     dOff.off,
                                                     dBytes.off,
                                                     et.off,
                                                     dt.off,
                                                     ms.off);
    if (this.statusIsError(ret)) {
      this.wasm.free(wencoded);
      this.wasm.free(decBuff);
      this.wasm.free(dOff);
      this.wasm.free(dBytes);
      this.wasm.free(et);
      this.wasm.free(dt);
      this.wasm.free(ms);
      return { str: null, status: ret };
    }

    // Get the decoded data as a string.
    const decOff = this.wasm.wasmToInt(dOff.off);
    const decoded = this.wasm.wasmToStr(decBuff, decOff);

    // Get the decode values.
    this.encTs = this.wasm.wasmToTimestamp(et);
    this.decTs = this.wasm.wasmToTimestamp(dt);
    this.msgSkipped = this.wasm.wasmToInt(ms.off);

    // Free the buffers.
    this.wasm.free(wencoded);
    this.wasm.free(decBuff);
    this.wasm.free(dOff);
    this.wasm.free(dBytes);
    this.wasm.free(et);
    this.wasm.free(dt);
    this.wasm.free(ms);

    // Return the decoded data and status.
    return { str: decoded, status: ret };
  }

  /** Returns the timestamp set during encoding or 0 if there is no
   *  timestamp. */
  getEncTs = (): MteTimestamp => {
    return this.encTs;
  }

  /** Returns the timestamp set during decoding or 0 if there is no
   *  timestamp. */
  getDecTs = (): MteTimestamp => {
    return this.decTs;
  }

  /** Return the number of messages that were skipped to get in sync for the
   *  last decoded message or 0 if there is no sequencing. */
  getMsgSkipped = (): number => {
    return this.msgSkipped;
  }

  /** Uninstantiate. */
  uninstantiate = (): MteStatus => {
    return this.exports.mte_dec_uninstantiate(this.decoder.off);
  }
}


/** This is the MTE Managed-Key Encryption encoder.
 *
 *  To use, create an instance passing the WASM helper which has been
 *  instantiated. */
export class MteMkeEnc extends MteBase {
  /** The encoder. */
  protected encoder: MteMem;

  /** Saved state buffers. */
  private saved: MteMem;
  private saved64: MteMem;

  /** Chunk-based encryption buffer. */
  private chunk: MteMem;

  /** Constructor taking the DRBG, token size in bytes, verifiers algorithm,
   *  cipher algorithm, and hash algorithm. */
  constructor(wasm: MteWasm,
              drbg: MteDrbgs | string,
              tokBytes: number,
              verifiers: MteVerifiers | string,
              cipher: MteCiphers | string,
              hash: MteHashes | string) {
    // Super.
    super(wasm);

    // Get the DRBG, verifier, cipher, and hash as enums if they are strings.
    const drbgE = typeof drbg === "string" ?
      this.getDrbgsAlgo(drbg) : drbg;
    const verifiersE = typeof verifiers === "string" ?
      this.getVerifiersAlgo(verifiers) : verifiers;
    const cipherE = typeof cipher === "string" ?
      this.getCiphersAlgo(cipher) : cipher;
    const hashE = typeof hash === "string" ?
      this.getHashesAlgo(hash) : hash;

    // Initialize the base.
    this.initBase(drbgE, tokBytes, verifiersE, cipherE, hashE);

    // Get the encoder size.
    const bytes = this.exports.mte_wasm_mke_enc_state_bytes(drbgE,
                                                            tokBytes,
                                                            verifiersE,
                                                            cipherE,
                                                            hashE);
    if (bytes == 0) {
      throw new RangeError("MteMkeEnc: Invalid options.");
    }

    // Allocate the encoder.
    this.encoder = wasm.malloc(bytes);

    // Initialize the encoder state.
    const stat = this.exports.mte_wasm_mke_enc_state_init(this.encoder.off,
                                                          drbgE,
                                                          tokBytes,
                                                          verifiersE,
                                                          cipherE,
                                                          hashE);
    if (stat != MteStatus.mte_status_success) {
      throw new RangeError("MteMkeEnc: Invalid options.");
    }

    // Saved state.
    this.saved =
      wasm.malloc(this.exports.mte_mke_enc_save_bytes(this.encoder.off));
    this.saved64 = wasm.malloc(
      this.exports.mte_wasm_mke_enc_save_bytes_b64(this.encoder.off));

    // Chunk-based encryption state.
    this.chunk = wasm.malloc(
      this.exports.mte_mke_enc_encrypt_state_bytes(this.encoder.off));
  }

  /** Create an encoder using default options. */
  public static fromdefault(wasm: MteWasm): MteMkeEnc {
    const base = new MteBase(wasm);
    return new MteMkeEnc(wasm,
                         base.getDefaultDrbg(),
                         base.getDefaultTokBytes(),
                         base.getDefaultVerifiers(),
                         base.getDefaultCipher(),
                         base.getDefaultHash());
  }

  /** Destruct. The WASM memory will be freed and the object can no longer be
   *  used. */
  destruct = (): void => {
    this.destructBase();
    this.wasm.free(this.encoder); this.encoder.invalidate();
    this.wasm.free(this.saved); this.saved.invalidate();
    this.wasm.free(this.saved64); this.saved64.invalidate();
    this.wasm.free(this.chunk); this.chunk.invalidate();
  }

  /** Instantiate the encoder with the personalization string. The entropy and
   *   nonce callbacks will be called to get the rest of the seeding material.
   *   Returns the status. */
  instantiate = (ps: string): MteStatus => {
    // Create the personalization string in WASM.
    const psWasm = this.wasm.strToWasm(ps);

    // Instantiate.
    const ret =
      this.exports.mte_wasm_mke_enc_instantiate(this.encoder.off,
                                                this.instance,
                                                this.instance,
                                                psWasm.off, psWasm.used);

    // Free the personalization string.
    this.wasm.free(psWasm);

    // Return the status.
    return ret;
  }

  /** Returns the reseed counter. */
  getReseedCounter = (): number => {
    return this.exports.mte_wasm_mke_enc_reseed_counter(this.encoder.off);
  }

  /** Returns the saved state as a byte array. On error, null is returned. */
  saveState = (): Uint8Array | null => {
    // Save to the save memory. Return the buffer.
    const status =
      this.exports.mte_mke_enc_state_save(this.encoder.off, this.saved.off);
    return status == MteStatus.mte_status_success ?
      new Uint8Array(this.saved.buff!) : null;
  }

  /** Returns the saved state, Base64 encoded. On error, null is returned. */
   saveStateB64 = (): string | null => {
    // Save to the save memory. Return the Base64-encoded string.
    const status =
      this.exports.mte_wasm_mke_enc_state_save_b64(this.encoder.off,
                                                   this.saved64.off);
    return status == MteStatus.mte_status_success ?
      this.wasm.wasmToStr(this.saved64) : null;
  }

  /** Restore a saved state, which must be the same length as was returned
   *  from the saveState() call. Returns the status. */
  restoreState = (saved: Uint8Array): MteStatus => {
    // Copy to the saved state buffer.
    this.wasm.arrToOffLen(saved, this.saved.off, saved.length);

    // Restore.
    return this.exports.mte_mke_enc_state_restore(this.encoder.off,
                                                  this.saved.off);
  }

  /** Restore a saved state, which must be the same length as was returned
   *  from the saveStateB64() call. Returns the status. */
   restoreStateB64 = (saved: string): MteStatus => {
    // Copy to the WASM memory.
    const stateWasm = this.wasm.strToWasm(saved);

    // Restore.
    const status =
      this.exports.mte_wasm_mke_enc_state_restore_b64(this.encoder.off,
                                                      stateWasm.off);

    // Free the WASM memory.
    this.wasm.free(stateWasm);

    // Return status.
    return status;
  }

  /** Encode the given data. Returns the encoded version and status. */
  encode = (data: Uint8Array): MteArrStatus => {
    // Copy the data to the WASM memory.
    const wdata = this.wasm.arrToWasm(data);

    // Allocate the encoder buffers.
    const bytes = this.exports.mte_mke_enc_buff_bytes(this.encoder.off,
                                                      data.length);
    const encBuff = this.wasm.malloc(bytes);
    const eOff = this.wasm.newInt();
    const eBytes = this.wasm.newInt();

    // Encode.
    const ret = this.exports.mte_wasm_mke_enc_encode(this.encoder.off,
                                                     this.instance,
                                                     wdata.off, data.length,
                                                     encBuff.off,
                                                     eOff.off,
                                                     eBytes.off);
    if (ret != MteStatus.mte_status_success) {
      this.wasm.free(wdata);
      this.wasm.free(encBuff);
      this.wasm.free(eOff);
      this.wasm.free(eBytes);
      return { arr: null, status: ret };
    }

    // Copy the encoded data to an array.
    const encOff = this.wasm.wasmToInt(eOff.off);
    const encBytes = this.wasm.wasmToInt(eBytes.off);
    const encoded = encBuff.buff!.slice(encOff, encOff + encBytes);

    // Free the buffers.
    this.wasm.free(wdata);
    this.wasm.free(encBuff);
    this.wasm.free(eOff);
    this.wasm.free(eBytes);

    // Return the encoded version and status.
    return { arr: encoded, status: ret };
  }

  /** Encode the given data, Base64 encoded. Returns the encoded version and
   *  status. */
  encodeB64 = (data: Uint8Array): MteStrStatus => {
    // Copy the data to the WASM memory.
    const wdata = this.wasm.arrToWasm(data);

    // Allocate the encoder buffers.
    const bytes = this.exports.mte_wasm_mke_enc_buff_bytes_b64(this.encoder.off,
                                                               data.length);
    const encBuff = this.wasm.malloc(bytes);
    const eOff = this.wasm.newInt();
    const eBytes = this.wasm.newInt();

    // Encode.
    const ret = this.exports.mte_wasm_mke_enc_encode_b64(this.encoder.off,
                                                         this.instance,
                                                         wdata.off,
                                                         data.length,
                                                         encBuff.off,
                                                         eOff.off,
                                                         eBytes.off);
    if (ret != MteStatus.mte_status_success) {
      this.wasm.free(wdata);
      this.wasm.free(encBuff);
      this.wasm.free(eOff);
      this.wasm.free(eBytes);
      return { str: null, status: ret };
    }

    // Convert to string.
    const encOff = this.wasm.wasmToInt(eOff.off);
    const encoded = this.wasm.wasmToStr(encBuff, encOff);

    // Free the buffers.
    this.wasm.free(wdata);
    this.wasm.free(encBuff);
    this.wasm.free(eOff);
    this.wasm.free(eBytes);

    // Return the encoded version and status.
    return { str: encoded, status: ret };
  }

  /** Encode the given string. Returns the encoded version and status. */
  encodeStr = (str: string): MteArrStatus => {
    // Convert the string to the WASM memory.
    const wdata = this.wasm.strToWasm(str);

    // Allocate the encoder buffers.
    const bytes = this.exports.mte_mke_enc_buff_bytes(this.encoder.off,
                                                      wdata.used);
    const encBuff = this.wasm.malloc(bytes);
    const eOff = this.wasm.newInt();
    const eBytes = this.wasm.newInt();

    // Encode.
    const ret = this.exports.mte_wasm_mke_enc_encode(this.encoder.off,
                                                     this.instance,
                                                     wdata.off, wdata.used,
                                                     encBuff.off,
                                                     eOff.off,
                                                     eBytes.off);
    if (ret != MteStatus.mte_status_success) {
      this.wasm.free(wdata);
      this.wasm.free(encBuff);
      this.wasm.free(eOff);
      this.wasm.free(eBytes);
      return { arr: null, status: ret };
    }

    // Copy the encoded data to an array.
    const encOff = this.wasm.wasmToInt(eOff.off);
    const encBytes = this.wasm.wasmToInt(eBytes.off);
    const encoded = encBuff.buff!.slice(encOff, encOff + encBytes);

    // Free the buffers.
    this.wasm.free(wdata);
    this.wasm.free(encBuff);
    this.wasm.free(eOff);
    this.wasm.free(eBytes);

    // Return the encoded version and status.
    return { arr: encoded, status: ret };
  }

  /** Encode the given string, Base64 encoded. Returns the encoded version and
   *  status. */
  encodeStrB64 = (str: string): MteStrStatus => {
    // Convert the string to the WASM memory.
    const wdata = this.wasm.strToWasm(str);

    // Allocate the encoder buffers.
    const bytes = this.exports.mte_wasm_mke_enc_buff_bytes_b64(this.encoder.off,
                                                               wdata.used);
    const encBuff = this.wasm.malloc(bytes);
    const eOff = this.wasm.newInt();
    const eBytes = this.wasm.newInt();

    // Encode.
    const ret = this.exports.mte_wasm_mke_enc_encode_b64(this.encoder.off,
                                                         this.instance,
                                                         wdata.off,
                                                         wdata.used,
                                                         encBuff.off,
                                                         eOff.off,
                                                         eBytes.off);
    if (ret != MteStatus.mte_status_success) {
      this.wasm.free(wdata);
      this.wasm.free(encBuff);
      this.wasm.free(eOff);
      this.wasm.free(eBytes);
      return { str: null, status: ret };
    }

    // Convert to string.
    const encOff = this.wasm.wasmToInt(eOff.off);
    const encoded = this.wasm.wasmToStr(encBuff, encOff);

    // Free the buffers.
    this.wasm.free(wdata);
    this.wasm.free(encBuff);
    this.wasm.free(eOff);
    this.wasm.free(eBytes);

    // Return the encoded version and status.
    return { str: encoded, status: ret };
  }

  /** Returns the length of the result finishEncrypt() will produce. Use this
      if you need to know that size before you can call it. */
  encryptFinishBytes = (): number => {
    return this.exports.mte_mke_enc_encrypt_finish_bytes(this.encoder.off);
  }

  /** Start a chunk-based encryption session. Returns the status. */
  startEncrypt = (): MteStatus => {
    return this.exports.mte_mke_enc_encrypt_start(this.encoder.off,
                                                  this.chunk.off);
  }

  /** Encrypt a chunk of data in a chunk-based encryption session. Returns the
   *  encrypted data. The length must be a multiple of the chosen cipher's
   *  block size. Returns null on error. */
  encryptChunk = (data: Uint8Array): Uint8Array | null => {
    // Copy to WASM memory.
    const wdata = this.wasm.arrToWasm(data);

    // Encrypt.
    const stat = this.exports.mte_wasm_mke_enc_encrypt_chunk(this.encoder.off,
                                                             this.chunk.off,
                                                             wdata.off,
                                                             data.length,
                                                             wdata.off);

    // Copy to the return buffer.
    let encrypted: Uint8Array | null = null;
    if (stat == MteStatus.mte_status_success) {
      encrypted = new Uint8Array(wdata.buff!);
    }

    // Free the WASM memory.
    this.wasm.free(wdata);

    // Return the encrypted data.
    return encrypted;
  }

  /** Finish a chunk-based encryption session. Returns the final part of the
   *  result and status. */
  finishEncrypt = (): MteArrStatus => {
    // Allocate the result offset and size.
    const rOff = this.wasm.newInt();
    const rBytes = this.wasm.newInt();

    // Finish the session.
    const ret = this.exports.mte_wasm_mke_enc_encrypt_finish(this.encoder.off,
                                                             this.chunk.off,
                                                             this.instance,
                                                             rOff.off,
                                                             rBytes.off);
    if (ret != MteStatus.mte_status_success) {
      this.wasm.free(rOff);
      this.wasm.free(rBytes);
      return { arr: null, status: ret };
    }

    // Copy the final result to a buffer.
    const resOff = this.wasm.wasmToInt(rOff.off);
    const resBytes = this.wasm.wasmToInt(rBytes.off);
    const result = this.chunk.buff!.slice(resOff, resOff + resBytes);

    // Free the result offset and size.
    this.wasm.free(rOff);
    this.wasm.free(rBytes);

    // Return the result and status.
    return { arr: result, status: ret };
  }

  /** Uninstantiate. */
  uninstantiate = (): MteStatus => {
    return this.exports.mte_mke_enc_uninstantiate(this.encoder.off);
  }
}

/** This is the MTE Managed-Key Encryption decoder.
 *
 *  To use, create an instance passing the WASM helper which has been
 *  instantiated. */
export class MteMkeDec extends MteBase {
  /** The decoder. */
  protected decoder: MteMem;

  /** Saved state buffers. */
  private saved: MteMem;
  private saved64: MteMem;

  /** Chunk-based decryptor state. */
  private chunk: MteMem;
  private ciphBlockBytes: number;

  /** Decode values. */
  private encTs: MteTimestamp = { ts: 0, upper: 0 };
  private decTs: MteTimestamp = { ts: 0, upper: 0 };
  private msgSkipped: number = 0;

  /** Constructor taking the DRBG, token size in bytes, verifiers algorithm,
   *  cipher algorith, hash algorithm, timestamp window, and sequence window. */
  constructor(wasm: MteWasm,
              drbg: MteDrbgs | string,
              tokBytes: number,
              verifiers: MteVerifiers | string,
              cipher: MteCiphers | string,
              hash: MteHashes | string,
              tWindow: number,
              sWindow: number) {
    // Super.
    super(wasm);

    // Get the DRBG, verifier, cipher, and hash as enums if they are strings.
    const drbgE = typeof drbg === "string" ?
      this.getDrbgsAlgo(drbg) : drbg;
    const verifiersE = typeof verifiers === "string" ?
      this.getVerifiersAlgo(verifiers) : verifiers;
    const cipherE = typeof cipher === "string" ?
      this.getCiphersAlgo(cipher) : cipher;
    const hashE = typeof hash === "string" ?
      this.getHashesAlgo(hash) : hash;

    // Initialize the base.
    this.initBase(drbgE, tokBytes, verifiersE, cipherE, hashE);

    // Get the decoder size.
    const bytes = this.exports.mte_wasm_mke_dec_state_bytes(drbgE,
                                                            tokBytes,
                                                            verifiersE,
                                                            cipherE,
                                                            hashE);
    if (bytes == 0) {
      throw new RangeError("MteMkeDec: Invalid options.");
    }

    // Allocate the decoder/decryptor.
    this.decoder = wasm.malloc(bytes);

    // Initialize the decoder/decryptor state.
    const stat = this.exports.mte_wasm_mke_dec_state_init(this.decoder.off,
                                                          drbgE,
                                                          tokBytes,
                                                          verifiersE,
                                                          cipherE,
                                                          hashE,
                                                          tWindow,
                                                          sWindow);
    if (stat != MteStatus.mte_status_success) {
      throw new RangeError("MteMkeDec: Invalid options.");
    }

    // Saved state.
    this.saved =
      wasm.malloc(this.exports.mte_mke_dec_save_bytes(this.decoder.off));
    this.saved64 = wasm.malloc(
      this.exports.mte_wasm_mke_dec_save_bytes_b64(this.decoder.off));

    // Chunk-based decryptor state.
    this.chunk = wasm.malloc(
      this.exports.mte_mke_dec_decrypt_state_bytes(this.decoder.off));
    this.ciphBlockBytes = this.getCiphersBlockBytes(cipherE);
    if (this.ciphBlockBytes == 0) {
      throw new RangeError("MteMkeDec: Invalid options.");
    }
  }

  /** Create a decoder using default options.
   *
   *  The timestamp window and sequence window are optionally settable. */
  public static fromdefault(wasm: MteWasm, tWindow = 0, sWindow = 0):MteMkeDec {
    const base = new MteBase(wasm);
    return new MteMkeDec(wasm,
                         base.getDefaultDrbg(),
                         base.getDefaultTokBytes(),
                         base.getDefaultVerifiers(),
                         base.getDefaultCipher(),
                         base.getDefaultHash(),
                         tWindow,
                         sWindow);
  }

  /** Destruct. The WASM memory will be freed and the object can no longer be
   *  used. */
  destruct = (): void => {
    this.destructBase();
    this.wasm.free(this.decoder); this.decoder.invalidate();
    this.wasm.free(this.saved); this.saved.invalidate();
    this.wasm.free(this.saved64); this.saved64.invalidate();
    this.wasm.free(this.chunk); this.chunk.invalidate();
  }

  /** Instantiate the decoder/decryptor with the personalization string. The
   *  entropy and nonce callbacks will be called to get the rest of the seeding
   *  material. Returns the status. */
  instantiate = (ps: string): MteStatus => {
    // Create the personalization string in WASM.
    const psWasm = this.wasm.strToWasm(ps);

    // Instantiate.
    const ret =
      this.exports.mte_wasm_mke_dec_instantiate(this.decoder.off,
                                                this.instance,
                                                this.instance,
                                                psWasm.off, psWasm.used);

    // Free the personalization string.
    this.wasm.free(psWasm);

    // Return the status.
    return ret;
  }

  /** Returns the reseed counter. */
  getReseedCounter = (): number => {
    return this.exports.mte_wasm_mke_dec_reseed_counter(this.decoder.off);
  }

  /** Returns the saved state as a byte array. On error, null is returned. */
  saveState = (): Uint8Array | null => {
    // Save to the save memory. Return the buffer.
    const status =
      this.exports.mte_mke_dec_state_save(this.decoder.off, this.saved.off);
    return status == MteStatus.mte_status_success ?
      new Uint8Array(this.saved.buff!) : null;
  }

  /** Returns the saved state, Base64 encoded. On error, null is returned. */
   saveStateB64 = (): string | null => {
    // Save to the save memory. Return the Base64-encoded string.
    const status =
      this.exports.mte_wasm_mke_dec_state_save_b64(this.decoder.off,
                                                   this.saved64.off);
    return status == MteStatus.mte_status_success ?
      this.wasm.wasmToStr(this.saved64) : null;
  }

  /** Restore a saved state, which must be the same length as was returned
   *  from the saveState() call. Returns the status. */
  restoreState = (saved: Uint8Array): MteStatus => {
    // Copy to the saved state buffer.
    this.wasm.arrToOffLen(saved, this.saved.off, saved.length);

    // Restore.
    return this.exports.mte_mke_dec_state_restore(this.decoder.off,
                                                  this.saved.off);
  }

  /** Restore a saved state, which must be the same length as was returned
   *  from the saveStateB64() call. Returns the status. */
   restoreStateB64 = (saved: string): MteStatus => {
    // Copy to the WASM memory.
    const stateWasm = this.wasm.strToWasm(saved);

    // Restore.
    const status =
      this.exports.mte_wasm_mke_dec_state_restore_b64(this.decoder.off,
                                                      stateWasm.off);

    // Free the WASM memory.
    this.wasm.free(stateWasm);

    // Return status.
    return status;
  }

  /** Decode the given encoded data. Returns the decoded data and status. */
  decode = (encoded: Uint8Array): MteArrStatus => {
    // Copy the message to the WASM memory.
    const wencoded = this.wasm.arrToWasm(encoded);

    // Allocate the decoder buffers.
    const bytes = this.exports.mte_mke_dec_buff_bytes(this.decoder.off,
                                                      encoded.length);
    if (bytes == 0) {
      this.wasm.free(wencoded);
      return { arr: null, status: MteStatus.mte_status_invalid_input };
    }
    const decBuff = this.wasm.malloc(bytes);
    const dOff = this.wasm.newInt();
    const dBytes = this.wasm.newInt();
    const et = this.wasm.newInt64();
    const dt = this.wasm.newInt64();
    const ms = this.wasm.newInt();

    // Decode.
    const ret =
      this.exports.mte_wasm_mke_dec_decode(this.decoder.off,
                                           this.instance,
                                           wencoded.off, encoded.length,
                                           decBuff.off,
                                           dOff.off,
                                           dBytes.off,
                                           et.off,
                                           dt.off,
                                           ms.off);
    if (this.statusIsError(ret)) {
      this.wasm.free(wencoded);
      this.wasm.free(decBuff);
      this.wasm.free(dOff);
      this.wasm.free(dBytes);
      this.wasm.free(et);
      this.wasm.free(dt);
      this.wasm.free(ms);
      return { arr: null, status: ret };
    }

    // Copy the decoded data to an array.
    const decOff = this.wasm.wasmToInt(dOff.off);
    const decBytes = this.wasm.wasmToInt(dBytes.off);
    const decoded = decBuff.buff!.slice(decOff, decOff + decBytes);

    // Get the decode values.
    this.encTs = this.wasm.wasmToTimestamp(et);
    this.decTs = this.wasm.wasmToTimestamp(dt);
    this.msgSkipped = this.wasm.wasmToInt(ms.off);

    // Free the buffers.
    this.wasm.free(wencoded);
    this.wasm.free(decBuff);
    this.wasm.free(dOff);
    this.wasm.free(dBytes);
    this.wasm.free(et);
    this.wasm.free(dt);
    this.wasm.free(ms);

    // Return the decoded data and status.
    return { arr: decoded, status: ret };
  }

  /** Decode the given Base64-encoded encoded data. Returns the decoded data
   *  and status. */
   decodeB64 = (encoded: string): MteArrStatus => {
    // Copy the Base64 to the WASM memory.
    const wencoded = this.wasm.strToWasm(encoded);

    // Allocate the decoder buffers.
    const bytes = this.exports.mte_wasm_mke_dec_buff_bytes_b64(this.decoder.off,
                                                               wencoded.used);
    const decBuff = this.wasm.malloc(bytes);
    const dOff = this.wasm.newInt();
    const dBytes = this.wasm.newInt();
    const et = this.wasm.newInt64();
    const dt = this.wasm.newInt64();
    const ms = this.wasm.newInt();

    // Decode.
    const ret = this.exports.mte_wasm_mke_dec_decode_b64(this.decoder.off,
                                                         this.instance,
                                                         wencoded.off,
                                                         wencoded.used,
                                                         decBuff.off,
                                                         dOff.off,
                                                         dBytes.off,
                                                         et.off,
                                                         dt.off,
                                                         ms.off);
    if (this.statusIsError(ret)) {
      this.wasm.free(wencoded);
      this.wasm.free(decBuff);
      this.wasm.free(dOff);
      this.wasm.free(dBytes);
      this.wasm.free(et);
      this.wasm.free(dt);
      this.wasm.free(ms);
      return { arr: null, status: ret };
    }

    // Copy the decoded data to an array.
    const decOff = this.wasm.wasmToInt(dOff.off);
    const decBytes = this.wasm.wasmToInt(dBytes.off);
    const decoded = decBuff.buff!.slice(decOff, decOff + decBytes);

    // Get the decode values.
    this.encTs = this.wasm.wasmToTimestamp(et);
    this.decTs = this.wasm.wasmToTimestamp(dt);
    this.msgSkipped = this.wasm.wasmToInt(ms.off);

    // Free the buffers.
    this.wasm.free(wencoded);
    this.wasm.free(decBuff);
    this.wasm.free(dOff);
    this.wasm.free(dBytes);
    this.wasm.free(et);
    this.wasm.free(dt);
    this.wasm.free(ms);

    // Return the decoded data and status.
    return { arr: decoded, status: ret };
  }

  /** Decode the given encoded version to a string. Returns the string and
   *  status. */
  decodeStr = (encoded: Uint8Array): MteStrStatus => {
    // Copy the encoded to the WASM memory.
    const wencoded = this.wasm.arrToWasm(encoded);

    // Allocate the decoder buffers.
    const bytes = this.exports.mte_mke_dec_buff_bytes(this.decoder.off,
                                                      encoded.length);
    if (bytes == 0) {
      this.wasm.free(wencoded);
      return { str: null, status: MteStatus.mte_status_invalid_input };
    }
    const decBuff = this.wasm.malloc(bytes);
    const dOff = this.wasm.newInt();
    const dBytes = this.wasm.newInt();
    const et = this.wasm.newInt64();
    const dt = this.wasm.newInt64();
    const ms = this.wasm.newInt();

    // Decode.
    const ret = this.exports.mte_wasm_mke_dec_decode(this.decoder.off,
                                                     this.instance,
                                                     wencoded.off,
                                                     encoded.length,
                                                     decBuff.off,
                                                     dOff.off,
                                                     dBytes.off,
                                                     et.off,
                                                     dt.off,
                                                     ms.off);
    if (this.statusIsError(ret)) {
      this.wasm.free(wencoded);
      this.wasm.free(decBuff);
      this.wasm.free(dOff);
      this.wasm.free(dBytes);
      this.wasm.free(et);
      this.wasm.free(dt);
      this.wasm.free(ms);
      return { str: null, status: ret };
    }

    // Get the decoded data as a string.
    const decOff = this.wasm.wasmToInt(dOff.off);
    const decoded = this.wasm.wasmToStr(decBuff, decOff);

    // Get the decode values.
    this.encTs = this.wasm.wasmToTimestamp(et);
    this.decTs = this.wasm.wasmToTimestamp(dt);
    this.msgSkipped = this.wasm.wasmToInt(ms.off);

    // Free the buffers.
    this.wasm.free(wencoded);
    this.wasm.free(decBuff);
    this.wasm.free(dOff);
    this.wasm.free(dBytes);
    this.wasm.free(et);
    this.wasm.free(dt);
    this.wasm.free(ms);

    // Return the decoded data and status.
    return { str: decoded, status: ret };
  }

  /** Decode the given Base64-encoded encoded version to a string. Returns the
   *  string and status. */
   decodeStrB64 = (encoded: string): MteStrStatus => {
    // Copy the Base64 to the WASM memory.
    const wencoded = this.wasm.strToWasm(encoded);

    // Allocate the decoder buffers.
    const bytes = this.exports.mte_wasm_mke_dec_buff_bytes_b64(this.decoder.off,
                                                               wencoded.used);
    const decBuff = this.wasm.malloc(bytes);
    const dOff = this.wasm.newInt();
    const dBytes = this.wasm.newInt();
    const et = this.wasm.newInt64();
    const dt = this.wasm.newInt64();
    const ms = this.wasm.newInt();

    // Decode.
    const ret = this.exports.mte_wasm_mke_dec_decode_b64(this.decoder.off,
                                                         this.instance,
                                                         wencoded.off,
                                                         wencoded.used,
                                                         decBuff.off,
                                                         dOff.off,
                                                         dBytes.off,
                                                         et.off,
                                                         dt.off,
                                                         ms.off);
    if (this.statusIsError(ret)) {
      this.wasm.free(wencoded);
      this.wasm.free(decBuff);
      this.wasm.free(dOff);
      this.wasm.free(dBytes);
      this.wasm.free(et);
      this.wasm.free(dt);
      this.wasm.free(ms);
      return { str: null, status: ret };
    }

    // Get the decoded data as a string.
    const decOff = this.wasm.wasmToInt(dOff.off);
    const decoded = this.wasm.wasmToStr(decBuff, decOff);

    // Get the decode values.
    this.encTs = this.wasm.wasmToTimestamp(et);
    this.decTs = this.wasm.wasmToTimestamp(dt);
    this.msgSkipped = this.wasm.wasmToInt(ms.off);

    // Free the buffers.
    this.wasm.free(wencoded);
    this.wasm.free(decBuff);
    this.wasm.free(dOff);
    this.wasm.free(dBytes);
    this.wasm.free(et);
    this.wasm.free(dt);
    this.wasm.free(ms);

    // Return the decoded data and status.
    return { str: decoded, status: ret };
  }

  /** Start a chunk-based decryption session. Returns the status. */
  startDecrypt = (): MteStatus => {
    return this.exports.mte_mke_dec_decrypt_start(this.decoder.off,
                                                  this.chunk.off);
  }

  /** Decrypt a chunk of data in a chunk-based decryption session. Returns the
   *  decrypted data. Returns null on error. */
  decryptChunk = (encrypted: Uint8Array): Uint8Array | null => {
    // Copy to WASM memory.
    const wencr = this.wasm.arrToWasm(encrypted);

    // Allocate space for the decrypted.
    const dBytes = this.wasm.newInt();
    const buffBytes = encrypted.length + this.ciphBlockBytes;
    const wdecr = this.wasm.malloc(buffBytes);

    // Decrypt.
    const status = this.exports.mte_wasm_mke_dec_decrypt_chunk(this.decoder.off,
                                                               this.chunk.off,
                                                               wencr.off,
                                                               encrypted.length,
                                                               wdecr.off,
                                                               dBytes.off);

    // Copy to the return buffer.
    const decBytes = this.wasm.wasmToInt(dBytes.off);
    const decrypted = wdecr.buff!.slice(0, decBytes);

    // Free WASM memory.
    this.wasm.free(wencr);
    this.wasm.free(wdecr);
    this.wasm.free(dBytes);

    // Return the decrypted data.
    return status == MteStatus.mte_status_success ? decrypted : null;
  }

  /** Finish a chunk-based decryption session. Returns the final part of the
   *  result and status. */
  finishDecrypt = (): MteArrStatus => {
    // Finish the session.
    const dOff = this.wasm.newInt();
    const dBytes = this.wasm.newInt();
    const et = this.wasm.newInt64();
    const dt = this.wasm.newInt64();
    const ms = this.wasm.newInt();
    const ret = this.exports.mte_wasm_mke_dec_decrypt_finish(this.decoder.off,
                                                             this.chunk.off,
                                                             this.instance,
                                                             dOff.off,
                                                             dBytes.off,
                                                             et.off,
                                                             dt.off,
                                                             ms.off);
    if (this.statusIsError(ret)) {
      this.wasm.free(dOff);
      this.wasm.free(dBytes);
      this.wasm.free(et);
      this.wasm.free(dt);
      this.wasm.free(ms);
      return { arr: null, status: ret };
    }

    // Copy the final decrypted data to a buffer.
    const decOff = this.wasm.wasmToInt(dOff.off);
    const decBytes = this.wasm.wasmToInt(dBytes.off);
    const decrypted = this.chunk.buff!.slice(decOff, decOff + decBytes);

    // Get the decode values.
    this.encTs = this.wasm.wasmToTimestamp(et);
    this.decTs = this.wasm.wasmToTimestamp(dt);
    this.msgSkipped = this.wasm.wasmToInt(ms.off);

    // Free the buffers.
    this.wasm.free(dOff);
    this.wasm.free(dBytes);
    this.wasm.free(et);
    this.wasm.free(dt);
    this.wasm.free(ms);

    // Return the decrypted data and status.
    return { arr: decrypted, status: ret };
  }

  /** Returns the timestamp set during encoding or 0 if there is no
   *  timestamp. */
  getEncTs = (): MteTimestamp => {
    return this.encTs;
  }

  /** Returns the timestamp set during decoding or 0 if there is no
   *  timestamp. */
  getDecTs = (): MteTimestamp => {
    return this.decTs;
  }

  /** Return the number of messages that were skipped to get in sync for the
   *  last decoded message or 0 if there is no sequencing. */
  getMsgSkipped = (): number => {
    return this.msgSkipped;
  }

  /** Uninstantiate. */
  uninstantiate = (): MteStatus => {
    return this.exports.mte_mke_dec_uninstantiate(this.decoder.off);
  }
}

/** This is the abstract MTE Secure Data Replacement Add-On.
 *
 *  To use, create an instance of a derived SDR. The derived SDR must override
 *  some of and may override all of the methods starting with "impl". The "impl"
 *  functions should be used directly; use only the read*() and write*()
 *  functions.
 *
 *  The term "directory" is an abstraction meant to imply a grouping of files.
 *  The specific implementation may use the directory in any way.
 */
export class MteSdrAbs {
  /** The WASM helper. */
  protected wasm: MteWasm;

  /** The encoder and decoder. */
  private enc: MteMkeEnc;
  private dec: MteMkeDec;
  private entropy = new Uint8Array(0);
  private nonce: Uint8Array;

  /** The SDR path. */
  private sdrPath: string;

  /** Memory files. */
  private memFiles = new Map<string, Uint8Array>();

  /** Constructor taking the MKE encoder/decoder and directory for the SDR to
   *  use.
   *
   *  Note: the MKE encoder/decoder provided to this object cannot be used
   *  outside this object as this object will change their states.
   */
  constructor(enc: MteMkeEnc, dec: MteMkeDec, sdrDir: string) {
    // Save the encoder and decoder.
    this.enc = enc;
    this.dec = dec;
    this.wasm = enc.wasm;

    // Set the callbacks to null to ensure our entropy and nonce will be used
    // and to ensure timestamps are disabled.
    this.enc.setEntropyCallback(null);
    this.dec.setEntropyCallback(null);
    this.enc.setNonceCallback(null);
    this.dec.setNonceCallback(null);
    this.enc.setTimestampCallback(null);
    this.dec.setTimestampCallback(null);

    // Set the correct nonce size based on the DRBG.
    const nonceMin = enc.getDrbgsNonceMinBytes(enc.getDrbg());
    const nonceMax = enc.getDrbgsNonceMaxBytes(enc.getDrbg());
    const nonceBytes = Math.min(Math.max(nonceMin, 8), nonceMax);
    this.nonce = new Uint8Array(nonceBytes);

    // Save the SDR path.
    this.sdrPath = sdrDir;
  }

  /** Returns the MKE encoder in use. This should only be used for
   *  information.
   */
  getEncoder = (): MteMkeEnc => {
    return this.enc;
  }

  /** Returns the MKE decoder in use. This should only be used for
   *  information.
   */
  getDecoder = (): MteMkeDec => {
    return this.dec;
  }

  /** Initializes the SDR with the entropy and nonce to use. Throws an
   *  exception if the SDR cannot be created.
   */
  initSdr = (entropy: Uint8Array, nonce: string): void => {
    // Save the entropy and nonce.
    this.entropy = entropy;
    this.nonce.fill(0);
    for (let i = 0; i < nonce.length; ++i) {
      let carry = parseInt(nonce.charAt(i));
      for (let j = 0; j < this.nonce.length; ++j) {
        let digit = (this.nonce[j] * 10) + carry;
        this.nonce[j] = digit % 256;
        carry = Math.floor(digit / 256);
      }
    }

    // If the SDR directory does not exist, create it.
    if (!this.implDirExists(this.sdrPath)) {
      this.implCreateDir(this.sdrPath);
    }
  }

  /** Read from storage or memory as data. If the same name exists in memory
   *  and on storage, the memory version is read. Throws an exception on I/O
   *  error or MTE error.
   */
  readData = (name: string): Uint8Array => {
    let encodedAll: Uint8Array;

    // Read the data.
    if (this.memFiles.has(name)) {
      encodedAll = this.memFiles.get(name)!;
    } else {
      encodedAll = this.implReadFile(this.sdrPath, name);
    }

    // Extract the timestamp. XOR the nonce into it.
    const nonce = new Uint8Array(this.nonce.length);
    for (let i = 0; i < nonce.length; ++i) {
      nonce[i] = encodedAll[i] ^ this.nonce[i];
    }

    // Copy the entropy because it will be zeroized. Instantiate with this name
    // and the SDR entropy and nonce.
    const eCopy = Uint8Array.from(this.entropy);
    this.dec.setEntropyArr(eCopy);
    this.dec.setNonceArr(nonce);
    const status = this.dec.instantiate(name);
    if (status != MteStatus.mte_status_success) {
      throw new Error("Error instantiating decoder (" +
                      this.dec.getStatusName(status) +
                      "): " +
                      this.dec.getStatusDescription(status));
    }

    // Remove the timestamp that is prepended.
    const encoded = encodedAll.slice(nonce.length);

    // Decode the data.
    const as = this.dec.decode(encoded);
    if (as.status != MteStatus.mte_status_success) {
      throw new Error("Error decoding data (" +
                      this.dec.getStatusName(as.status) +
                      "): " +
                      this.dec.getStatusDescription(as.status));
    }

    // Return the data.
    return as.arr!;
  }

  /** Read from storage or memory as a string. If the same name exists in memory
   *  and on storage, the memory version is read. Throws an exception on I/O
   *  error or MTE error.
   */
  readString = (name: string): string => {
    let encodedAll: Uint8Array;

    // Read the data.
    if (this.memFiles.has(name)) {
      encodedAll = this.memFiles.get(name)!;
    } else {
      encodedAll = this.implReadFile(this.sdrPath, name);
    }

    // Extract the timestamp. XOR the nonce into it.
    const nonce = new Uint8Array(this.nonce.length);
    for (let i = 0; i < nonce.length; ++i) {
      nonce[i] = encodedAll[i] ^ this.nonce[i];
    }

    // Copy the entropy because it will be zeroized. Instantiate with this name
    // and the SDR entropy and nonce.
    const eCopy = Uint8Array.from(this.entropy);
    this.dec.setEntropyArr(eCopy);
    this.dec.setNonceArr(nonce);
    const status = this.dec.instantiate(name);
    if (status != MteStatus.mte_status_success) {
      throw new Error("Error instantiating decoder (" +
                      this.dec.getStatusName(status) +
                      "): " +
                      this.dec.getStatusDescription(status));
    }

    // Remove the timestamp that is prepended.
    const encoded = encodedAll.slice(nonce.length);

    // Decode the data.
    const ss = this.dec.decodeStr(encoded);
    if (ss.status != MteStatus.mte_status_success) {
      throw new Error("Error decoding data (" +
                      this.dec.getStatusName(ss.status) +
                      "): " +
                      this.dec.getStatusDescription(ss.status));
    }

    // Return the data.
    return ss.str!;
  }

  /** Write the given data to storage or memory. If the name matches the name
   *  of a previously written file, this will overwrite it. If toMemory is
   *  true, the data or string is saved to memory and not written to
   *  permanent storage; there are no restrictions on the contents of the
   *  name argument. If toMemory is false, the data or string is saved to
   *  permanent storage in the SDR directory set in the constructor; the name
   *  argument must be a valid name for the type of storage. Throws an exception
   *  on I/O error or MTE error.
   */
  writeData = (name: string,
               data: Uint8Array,
               toMemory: boolean = false): void => {
    // Get the timestamp. XOR the nonce into it.
    const ts = this.implGetTimestamp();
    const nonce = new Uint8Array(this.nonce.length);
    for (let i = 0; i < nonce.length; ++i) {
      nonce[i] = ts[i] ^ this.nonce[i];
    }

    // Copy the entropy because it will be zeroized. Instantiate with this name
    // and the SDR entropy and nonce.
    const eCopy = Uint8Array.from(this.entropy);
    this.enc.setEntropyArr(eCopy);
    this.enc.setNonceArr(nonce);
    const status = this.enc.instantiate(name);
    if (status != MteStatus.mte_status_success) {
      throw new Error("Error instantiating encoder (" +
                      this.enc.getStatusName(status) +
                      "): " +
                      this.enc.getStatusDescription(status));
    }

    // Encode the data.
    const as = this.enc.encode(data);
    if (as.status != MteStatus.mte_status_success) {
      throw new Error("Error encoding data (" +
                      this.enc.getStatusName(as.status) +
                      "): " +
                      this.enc.getStatusDescription(as.status));
    }

    // Prepend the timestamp to the encoded version.
    const encoded = new Uint8Array(as.arr!.length + ts.length);
    for (let i = 0; i < ts.length; ++i) {
      encoded[i] = ts[i];
    }
    for (let i = 0; i < as.arr!.length; ++i) {
      encoded[i + ts.length] = as.arr![i];
    }

    // If saving to memory, add it to the memory map.
    if (toMemory) {
      this.memFiles.set(name, encoded);
    } else {
      this.implWriteFile(this.sdrPath, name, encoded);
    }
  }

  /** Write the given string to storage or memory. If the name matches the name
   *  of a previously written file, this will overwrite it. If toMemory is
   *  true, the data or string is saved to memory and not written to
   *  permanent storage; there are no restrictions on the contents of the
   *  name argument. If toMemory is false, the data or string is saved to
   *  permanent storage in the SDR directory set in the constructor; the name
   *  argument must be a valid name for the type of storage. Throws an exception
   *  on I/O error or MTE error.
   */
  writeString = (name: string,
                 str: string,
                 toMemory: boolean = false): void => {
    // Get the timestamp. XOR the nonce into it.
    const ts = this.implGetTimestamp();
    const nonce = new Uint8Array(this.nonce.length);
    for (let i = 0; i < nonce.length; ++i) {
      nonce[i] = ts[i] ^ this.nonce[i];
    }

    // Copy the entropy because it will be zeroized. Instantiate with this name
    // and the SDR entropy and nonce.
    const eCopy = Uint8Array.from(this.entropy);
    this.enc.setEntropyArr(eCopy);
    this.enc.setNonceArr(nonce);
    const status = this.enc.instantiate(name);
    if (status != MteStatus.mte_status_success) {
      throw new Error("Error instantiating encoder (" +
                      this.enc.getStatusName(status) +
                      "): " +
                      this.enc.getStatusDescription(status));
    }

    // Encode the data.
    const as = this.enc.encodeStr(str);
    if (as.status != MteStatus.mte_status_success) {
      throw new Error("Error encoding data (" +
                      this.enc.getStatusName(as.status) +
                      "): " +
                      this.enc.getStatusDescription(as.status));
    }

    // Prepend the timestamp to the encoded version.
    const encoded = new Uint8Array(as.arr!.length + ts.length);
    for (let i = 0; i < ts.length; ++i) {
      encoded[i] = ts[i];
    }
    for (let i = 0; i < as.arr!.length; ++i) {
      encoded[i + ts.length] = as.arr![i];
    }

    // If saving to memory, add it to the memory map.
    if (toMemory) {
      this.memFiles.set(name, encoded);
    } else {
      this.implWriteFile(this.sdrPath, name, encoded);
    }
  }

  /** Removes an SDR item. If the same name exists in memory and on storage,
   *  the memory version is removed.
   *
   *  It is not an error to remove an item that does not exist. An exception is
   *  thrown if the file exists and cannot be removed.
   */
  remove = (name: string): void => {
    // Remove from memory if it exists there.
    if (this.memFiles.has(name)) {
      this.memFiles.delete(name);
    } else {
      // Remove from the SDR if it exists there.
      this.implRemoveFile(this.sdrPath, name);
    }
  }

  /** Removes the SDR. All memory and storage items are removed. This object
   *  is not usable until a new call to initSdr().
   *
   *  It is not an error to remove a SDR that does not exist. An exception is
   *  thrown if any file in the SDR cannot be removed.
   */
  removeSdr = (): void => {
    // If the SDR directory exists, remove.
    if (this.implDirExists(this.sdrPath)) {
      // Remove each file.
      const files = this.implListFiles(this.sdrPath);
      for (let i = 0; i < files.length; ++i) {
        this.implRemoveFile(this.sdrPath, files[i]);
      }

      // Remove the SDR directory.
      this.implRemoveDir(this.sdrPath);
    }
  }

  /** Returns true if the directory exists, false if not. This implementation
   *  returns true.
   */
  implDirExists = (dir: string): boolean => {
    dir;
    return true;
  }

  /** Returns a list of file basenames in a directory. Throws an exception on
   *  failure. This implementation returns an empty list.
   */
  implListFiles = (dir: string): Array<string> => {
    dir;
    return [];
  }

  /** Creates a directory, including any intermediate directories as necessary.
   *  Throws an exception on failure. This implementation does nothing.
   */
  implCreateDir = (dir: string): void => {
    dir;
  }

  /** Reads a file. Returns the file contents. Throws an exception on failure.
   *  This implementation throws an exception.
   */
  implReadFile = (dir: string, file: string): Uint8Array => {
    dir;
    file;
    throw new Error("MteSdrAbs.readFile() called.");
  }

  /** Writes a file. Throws an exception on failure. This implementation throws
   *  an exception.
   */
  implWriteFile = (dir: string, file: string, contents: Uint8Array): void => {
    dir;
    file;
    contents;
    throw new Error("MteSdrAbs.writeFile() called.");
  }

  /** Removes a directory. Throws an exception on failure. This implementation
   *  does nothing.
   */
  implRemoveDir = (dir: string): void => {
    dir;
  }

  /** Removes a file. Throws an exception on failure. This implementation does
   *  nothing.
   */
  implRemoveFile = (dir: string, file: string): void => {
    dir;
    file;
  }

  /** Returns the timestamp in big endian to increase entropy since the nonce
   *  is little endian.
   */
  implGetTimestamp = (): Uint8Array => {
    // Get the current timestamp.
    let tsInt = Math.floor(Date.now());

    // Place it in the array in big-endian order.
    const ts = new Uint8Array(this.nonce.length);
    for (let i = ts.length - 1; i >= 0; --i) {
      ts[i] = tsInt % 256;
      tsInt = Math.floor(tsInt / 256);
    }

    // Return the timestamp.
    return ts;
  }
}

/** This is the MTE Secure Data Replacement Add-On which stores files as
 *  cookies.
 *
 *  Use the MteSdrAbs interface, not the "impl" functions found here.
 *
 *  The "directory" is used as a prefix to the filenames to distinguish them
 *  from other cookies and from other cookie SDRs.
 */
export class MteSdrCookie extends MteSdrAbs {
  /** Cookie attributes suffix. */
  private attrs: string;

  /** Constructor taking the MKE encoder/decoder, directory for the SDR to
   *  use, and cookie attributes to append.
   *
   *  Note that a cookie attribute starts with a semicolon to separate it from
   *  the previous value or attribute. Therefore, to add a max age of 100, the
   *  attrs should be "; max-age=100".
   *
   *  Note: the MKE encoder/decoder provided to this object cannot be used
   *  outside this object as this object will change their states.
   */
  constructor(enc: MteMkeEnc, dec: MteMkeDec, sdrDir: string, attrs: string) {
    // Super.
    super(enc, dec, sdrDir);

    // Save the attributes.
    this.attrs = attrs;
  }

  /** Create an SDR at the given directory with the cookie attributes to
   *  append. Default-constructed MKE encoder and decoder are created.
   */
  public static fromdefault(wasm: MteWasm,
                            sdrDir: string,
                            attrs: string): MteSdrCookie {
    return new MteSdrCookie(MteMkeEnc.fromdefault(wasm),
                            MteMkeDec.fromdefault(wasm),
                            sdrDir,
                            attrs);
  }

  /** Returns a list of file basenames in a directory. Throws an exception on
   *  failure.
   */
  implListFiles = (dir: string): Array<string> => {
    // Create the cookie name prefix.
    const name = dir + "_";

    // Filter the cookie list by the prefix, keeping the cookie name, removing
    // the prefix.
    return document.cookie.split(';').filter((item) =>
      item.trim().startsWith(name)).map((item) =>
      item.split('=')[0].trim().slice(name.length));
  }

  /** Reads a file. Returns the file contents. Throws an exception on failure.
   */
  implReadFile = (dir: string, file: string): Uint8Array => {
    // Find the file.
    const name = dir + "_" + file + "=";
    const cookie = document.cookie.split(';').filter((item) =>
      item.trim().startsWith(name));
    if (cookie.length != 1) {
      throw new Error("Could not find cookie.");
    }

    // Decode the cookie value, then Base64 decode that to get the data.
    const c = cookie[0];
    return this.wasm.b64decode(decodeURIComponent(c.split("=")[1].trim()));
  }

  /** Writes a file. Throws an exception on failure. */
  implWriteFile = (dir: string, file: string, contents: Uint8Array): void => {
    // Base64 encode the data. Encode that with the URI component rules to
    // ensure a valid cookie value.
    const encoded = encodeURIComponent(this.wasm.b64encode(contents));

    // Set the cookie, appending the attributes.
    document.cookie = dir + "_" + file + "=" + encoded + this.attrs;
  }

  /** Removes a file. Throws an exception on failure. */
  implRemoveFile = (dir: string, file: string): void => {
    // Set the cookie with an expiration of zero.
    document.cookie = dir + "_" + file + "=_; max-age=0";
  }
}

/** This is the MTE Secure Data Replacement Add-On which stores files in local
 *  or session storage.
 *
 *  Use the MteSdrAbs interface, not the "impl" functions found here.
 *
 *  The "directory" is used as a prefix to the filenames to distinguish them
 *  from other storage files and from other storage file SDRs.
 */
export class MteSdrStorage extends MteSdrAbs {
  /** Storage. */
  private storage: Storage;

  /** Constructor taking the MKE encoder/decoder, directory for the SDR to
   *  use, and storage to use (true = local, false = session).
   *
   *  Note: the MKE encoder/decoder provided to this object cannot be used
   *  outside this object as this object will change their states.
   */
  constructor(enc: MteMkeEnc, dec: MteMkeDec, sdrDir: string,
              useLocal: boolean) {
    // Super.
    super(enc, dec, sdrDir);

    // Get the correct storage.
    this.storage = useLocal ? window.localStorage : window.sessionStorage;
  }

  /** Create an SDR at the given directory with the storage choice. Default-
   *  constructed MKE encoder and decoder are created.
   */
  public static fromdefault(wasm: MteWasm,
                            sdrDir: string,
                            useLocal: boolean): MteSdrStorage {
    return new MteSdrStorage(MteMkeEnc.fromdefault(wasm),
                             MteMkeDec.fromdefault(wasm),
                             sdrDir,
                             useLocal);
  }

  /** Returns a list of file basenames in a directory. Throws an exception on
   *  failure.
   */
  implListFiles = (dir: string): Array<string> => {
    // Create the name prefix.
    const name = dir + "/";

    // Iterate the keys of the storage looking for matches.
    const files = new Array<string>();
    for (let i = 0; i < this.storage.length; ++i) {
      const key = this.storage.key(i);
      if (key!.startsWith(name)) {
        files.push(key!.slice(name.length));
      }
    }

    return files;
  }

  /** Reads a file. Returns the file contents. Throws an exception on failure.
   */
  implReadFile = (dir: string, file: string): Uint8Array => {
    // Find the file.
    const name = dir + "/" + file;
    const item = this.storage.getItem(name);
    if (item == null) {
      throw new Error("Could not find file.");
    }

    // Base64 decode the item value to get the data.
    return this.wasm.b64decode(item);
  }

  /** Writes a file. Throws an exception on failure. */
  implWriteFile = (dir: string, file: string, contents: Uint8Array): void => {
    // Base64 encode the data.
    const encoded = this.wasm.b64encode(contents);

    // Set the value.
    const name = dir + "/" + file;
    this.storage.setItem(name, encoded);
  }

  /** Removes a file. Throws an exception on failure. */
  implRemoveFile = (dir: string, file: string): void => {
    const name = dir + "/" + file;
    this.storage.removeItem(name);
  }
}






/** Class MteRandom
 *
 * This is a class for the random generator function.
 *
 * This class requires the availability of Web Cryptography API (crypto module).
 * https://www.w3.org/TR/WebCryptoAPI/
 *
 */
export class MteRandom {

  static getBytes = (buffer: Uint8Array): boolean => {
    if (buffer.length == 0)
      return false;
    if (typeof window === "undefined") {
      // In server-side context or nodejs
      // @ts-ignore
      const crypto = require("crypto");
      crypto.getRandomValues(buffer);
      return true;
    } else {
      // In browser context
      window.crypto.getRandomValues(buffer);
      return true;
    }
  }

}





/** This is the MTE Diffie-Hellman key exchange add-on.
 *
 *  To use, create an instance passing the WASM helper which has been
 *  instantiated and the desired security strength. */

export enum MteKyberStrength {
    none = 0,
    K512 = 512,
    K768 = 768,
    K1024 = 1024
  }

export enum MteKyberStatus {
  success = 0,
  invalidStrength = -1,
  entropyFail = -2,
  invalidPubKey = -3,
  invalidPrivKey = -4,
  memoryFail = -5,
  invalidCipherText = -6
}

/** An array and status. */
export interface MteKyberResults {
  /** The 1st result. */
  result1: Uint8Array | null;
  /** The 2nd result, if applicable. */
  result2: Uint8Array | null;
  /** The status. */
  status: MteKyberStatus;
}

export class MteKyber {

  /** The WASM helper. */
  readonly wasm: MteWasm;
  readonly exports: MteWasmExports;
  readonly memory: WebAssembly.Memory;

  /** Instances. */
  private static readonly instances: (MteKyber | null)[] = [];
  /** Instance index. */
  private instance: number;

  /** Sizes. */
  private publicKeySize:number = 0;
  private privateKeySize:number = 0;
  private minEntropySize:number = 0;
  private maxEntropySize:number = 0;
  private encryptedSize:number = 0;
  private secretSize:number = 0; 

  /** The current strength. */
  private static strength: MteKyberStrength = MteKyberStrength.none;

  /** The private key. */
  private privateKey: Uint8Array | null = null;

  /* Implementation. */
  private myEntropyCb: MteKyberCallback | null = null;
  private myEntropy: Uint8Array | null = null;

  /** Constructor which needs no parameters. */
  constructor(wasm: MteWasm, strength: MteKyberStrength) {

    // Check for the current strength setting.
    if (MteKyber.strength !== MteKyberStrength.none &&
        MteKyber.strength !== strength) {
      throw new TypeError
                ("MteKyber: differing Kyber strengths are not supported.");
    }

    // Reference the WASM.
    this.wasm = wasm;
    if (wasm.exports !== null) {
      this.exports = wasm.exports;
    } else {
      throw new TypeError("MteKyber: WASM does not have exports.");
    }
    if (wasm.memory !== null) {
      this.memory = wasm.memory;
    } else {
      throw new TypeError("MteKyber: WASM does not have memory.");
    }

    // Set the WASM callbacks.
    if (wasm.kyberCallback === null) {
      wasm.kyberCallback = this.defaultCallback;
    }

    // Register the instance.
    this.instance = -1;
    for (let i = 0; i < MteKyber.instances!.length; i++) {
      if (MteKyber.instances![i] === null) {
        this.instance = i;
        break;
      }
    }
    if (this.instance === -1) {    
      this.instance = MteKyber.instances!.length;
      MteKyber.instances!.push(this);
    } else {
      MteKyber.instances![this.instance] = this;
    }

    // Setup Kyber.
    if (this.exports.mte_wasm_kyber_init(strength) != MteKyberStatus.success) {
      throw new TypeError("MteKyber: intializing the strength failed.");
    } else {
      MteKyber.strength = strength;
      this.publicKeySize = this.exports.mte_wasm_kyber_get_pubkey_size();
      this.privateKeySize = this.exports.mte_wasm_kyber_get_privkey_size();
      this.minEntropySize = this.exports.mte_wasm_kyber_get_min_entropy_size();
      this.maxEntropySize = this.exports.mte_wasm_kyber_get_max_entropy_size();
      this.encryptedSize = this.exports.mte_wasm_kyber_get_encrypted_size();
      this.secretSize = this.exports.mte_wasm_kyber_get_secret_size();
    }
  }

  /** These functions provide information on sizes for keys and
   *  encrypted and unencrypted secrets as well as entropy requirements
   *  and a human readable representation of the current algorithm. */
  getPublicKeySize = (): number => {
    return this.publicKeySize;
  }

  getSecretSize = (): number => {
    return this.secretSize;
  }

  getEncryptedSize = (): number => {
    return this.encryptedSize;
  }

  getminEntropySize = (): number => {
    return this.minEntropySize;
  }

  getMaxEntropySize = (): number => {
    return this.maxEntropySize;
  }

  getAlgorithm = (): string => {
    const off = this.exports.mte_wasm_kyber_get_algorithm();
    return this.wasm.wasmOffToStr(off);
  }

  /** Set the entropy callback. If not null, it is called to get entropy. If
   *  null, the entropy set with setEntropy() is used. If that was not set
   *  either, the internal random number generator is used. */
  setEntropyCallback = (cb: MteKyberCallback | null): void => {
    this.myEntropyCb = cb;
  }

  /** Set the entropy input value. This must be done before calling
   *  createKeypair which will trigger the entropy callback.
   *
   *  The entropy is zeroized immediately.
   *
   *  If the entropy callback is null, entropyInput is used as the entropy. */
  setEntropy = (entropy: Uint8Array): MteKyberStatus => {
    if (entropy.length < this.minEntropySize ||
        entropy.length > this.maxEntropySize)
      return MteKyberStatus.entropyFail;
    // Copy entropy to myEntropy and zeroize entropy
    this.myEntropy = new Uint8Array(entropy.length);
    for (let i = 0; i < entropy.length; ++i) {
      this.myEntropy[i] = entropy[i];
      entropy[i] = 0;
    }
    return MteKyberStatus.success;
  }

  /** Creates a key pair and returns the public key along
   *  with the status. The private key is kept within the class. */
  createKeypair = (): MteKyberResults => {
    let status: MteKyberStatus = MteKyberStatus.success;
    // Create the buffers for public and private keys.
    const wPublic = this.wasm.malloc(this.publicKeySize);
    const wPublicBytes = this.wasm.newInt();
    this.wasm.intToWasm(wPublicBytes.off, this.publicKeySize);
    const wPrivate = this.wasm.malloc(this.privateKeySize);
    const wPrivateBytes = this.wasm.newInt();
    this.wasm.intToWasm(wPrivateBytes.off, this.privateKeySize);
    // Create the key pair
    status = this.exports.mte_wasm_kyber_create_keypair
             (wPrivate.off, wPrivateBytes.off,
              wPublic.off, wPublicBytes.off,
              this.instance);
    if (status != MteKyberStatus.success) {
      // Free the wasm resources
      this.wasm.free(wPublic);
      this.wasm.free(wPublicBytes);
      this.wasm.free(wPrivate);
      this.wasm.free(wPrivateBytes);
      return { result1: null, result2: null, status: status };
    }
    // Copy the keys from wasm.
    const publicKey = wPublic.buff!.slice(0, this.publicKeySize);
    this.privateKey = wPrivate.buff!.slice(0, this.privateKeySize);
    // Free the wasm resources
    this.wasm.free(wPublic);
    this.wasm.free(wPublicBytes);
    this.wasm.free(wPrivate);
    this.wasm.free(wPrivateBytes);
    return { result1: publicKey, result2: null, status: status };
  }

  /** Returns the shared secret using the peer public key along
   *  with the status. */
  createSecret = (peerPublicKey: Uint8Array): MteKyberResults => {
    // Copy the data to the WASM memory.
    const wPeerPubKey = this.wasm.arrToWasm(peerPublicKey);
    // Create the buffer to receive the unencrypted secret.
    const wSecret = this.wasm.malloc(this.secretSize);
    // The length for the unencrypted secret.
    const wSecretBytes = this.wasm.newInt();
    this.wasm.intToWasm(wSecretBytes.off, this.secretSize);
    // Create the buffer to receive the encrypted secret.
    const wEncrypted = this.wasm.malloc(this.encryptedSize);
    // The length for the unencrypted secret.
    const wEncryptedBytes = this.wasm.newInt();
    this.wasm.intToWasm(wEncryptedBytes.off, this.encryptedSize);
    // Create the secret.
    const rc = this.exports.mte_wasm_kyber_create_secret
               (wPeerPubKey.off, peerPublicKey.length,
                wSecret.off, wSecretBytes.off,
                wEncrypted.off, wEncryptedBytes.off,
                this.instance);
    // Free the wasm key resources
    this.wasm.free(wPeerPubKey);
    // Bail out if not successful.
    if (rc !== MteKyberStatus.success) {
      // Free the wasm secret resources
      this.wasm.free(wSecret);
      this.wasm.free(wSecretBytes);
      this.wasm.free(wEncrypted);
      this.wasm.free(wEncryptedBytes);
      return { result1: null, result2: null, status: rc };
    }
    // Create the results.
    const secret = wSecret.buff!.slice(0, this.secretSize);
    const encrypted = wEncrypted.buff!.slice(0, this.encryptedSize);
    // Free the wasm secret resources
    this.wasm.free(wSecret);
    this.wasm.free(wSecretBytes);
    this.wasm.free(wEncrypted);
    this.wasm.free(wEncryptedBytes);
    // Return the secret and successful status.
    return { result1: secret, result2: encrypted,
             status: MteKyberStatus.success };
  }

  /** Decrypts the given encrypted secret using the the internally
   *  stored private key. Fails if there is no private key.
   *  Returns the decrypted secret along with the status. */
  decryptSecret = (encrypted: Uint8Array): MteKyberResults => {
    if (this.privateKey === null)
      return { result1: null, result2: null,
               status: MteKyberStatus.invalidPrivKey };
    // Copy the data to the WASM memory.
    const wPrivateKey = this.wasm.arrToWasm(this.privateKey);
    const wEncrypted = this.wasm.arrToWasm(encrypted);
    // Create the buffer to receive the unencrypted secret.
    const wSecret = this.wasm.malloc(this.secretSize);
    // The length for the unencrypted secret.
    const wSecretBytes = this.wasm.newInt();
    this.wasm.intToWasm(wSecretBytes.off, this.secretSize);
    // Decrypt the secret.
    const rc = this.exports.mte_wasm_kyber_decrypt_secret
               (wPrivateKey.off, this.privateKey.length,
                wEncrypted.off, encrypted.length,
                wSecret.off, wSecretBytes.off);
    // Free the wasm key resources
    this.wasm.free(wPrivateKey);
    this.wasm.free(wEncrypted);
    // Bail out if not successful.
    if (rc !== MteKyberStatus.success) {
      // Free the wasm secret resources
      this.wasm.free(wSecret);
      this.wasm.free(wSecretBytes);
      return { result1: null, result2: null, status: rc };
    }
    // Create the results.
    const secret = wSecret.buff!.slice(0, this.secretSize);
    // Free the wasm secret resources
    this.wasm.free(wSecret);
    this.wasm.free(wSecretBytes);
    // Return the secret and successful status.
    return { result1: secret, result2: null,
             status: MteKyberStatus.success };
  }

  /** Zeroize the given byte array. */
  static zeroize = (dest: Uint8Array): void => {
    for (let i = 0; i < dest.length; ++i) {
      dest[i] = 0;
    }
  }

  /** Destruct. Remove our instance from the instances. */
  destruct = (): void => {
    MteKyber.instances[this.instance] = null;
    while (MteKyber.instances!.length > 0 &&
           MteKyber.instances![MteKyber.instances!.length - 1] == null) {
      MteKyber.instances!.pop();
    }
  }

  /** The entropy callback. */
  defaultCallback = (context: number,
                     entropy: number, entropyBytes: number,
                     minEntropyBytes: number,
                     maxEntropyBytes: number): MteKyberStatus => {
    // Get the MTE instance.
    const myInstance = MteKyber.instances![context];

    // Call the override callback if set.
    if (myInstance!.myEntropyCb !== null) {
      return myInstance!.myEntropyCb.entropyCallback
             (entropy, entropyBytes, minEntropyBytes, maxEntropyBytes);
    }

    // Check if we even have myEntropy
    if (myInstance!.myEntropy === null) {
      let randBytes = new Uint8Array(minEntropyBytes);
      if (!MteRandom.getBytes(randBytes))
        return MteKyberStatus.entropyFail;
      // Copy random bytes to wasm and zeroize original
      let dest = this.wasm.wasmOverlay(entropy, minEntropyBytes);
      for (let i = 0; i < minEntropyBytes; ++i) {
        dest[i] = randBytes[i];
        randBytes[i] = 0;
      }
      // Update the entropy size
      myInstance!.wasm.intToWasm(entropyBytes, minEntropyBytes);
    } else {
      // Copy myEntropy bytes to wasm and zeroize original
      let dest = this.wasm.wasmOverlay(entropy, myInstance!.myEntropy.length);
      for (let i = 0; i < myInstance!.myEntropy.length; ++i) {
        dest[i] = myInstance!.myEntropy[i];
        myInstance!.myEntropy[i] = 0;
      }
      // Update the entropy size
      myInstance!.wasm.intToWasm(entropyBytes, myInstance!.myEntropy.length);
      myInstance!.myEntropy = null;
    }
    // Success.
    return MteKyberStatus.success;
  }
}

/** Signature of a Kyber entropy callback. */
export interface MteKyberCallback {
  entropyCallback(
  /** Offset in WASM memory of the 32-bit offset in WASM memory of the provided
   *  array of the length given by maxEntropyBytes. The length is fixed. */
  entropy: number,

  /** Offset in WASM memory of the 32-bit length of the provided array on input;
   *  initially holds the same value as in maxEntropyBytes which equals the size
   *  of the provided buffer. The callback must set the 32-bit length of the
   *  actual entropy here. */
  entropyBytes: number,

  /** Offset in WASM memory of the 32-bit minimum entropy size;
   *  the value is for information only. It cannot be changed. */
  minEntropyBytes: number,

  /** Offset in WASM memory of the 32-bit maximum entropy size;
   *  the value is for information only. It cannot be changed. */
  maxEntropyBytes: number
  ): MteKyberStatus;
}



/** Signature of an entropy input callback. */
export interface MteEntropyCallback {
  entropyCallback(
    /** The minimum entropy. */
    minEntropy: number,

    /** The minimum length in bytes. */
    minLength: number,

    /** The maximum length in bytes. */
    maxLength: number,

    /** Offset in WASM memory of the 32-bit offset in WASM memory of the
     *  provided array of length given by eiBytes. If larger entropy must be
     *  provided, WASM memory must be allocated and the 32-bit offset set to
     *  the offset of it. */
    entropyInput: number,

    /** Offset in WASM memory of the 32-bit length of the provided array on
     *  input; the callback must set the 32-bit length of the actual entropy
     *  here. */
    eiBytes: number
  ): MteStatus;
}

/** Signature of a nonce callback. */
export interface MteNonceCallback {
  nonceCallback(
    /** The minimum nonce length. */
    minLength: number,

    /** The maximum nonce length. */
    maxLength: number,

    /** Offset in WASM memory of the nonce array to write the nonce to. */
    nonce: number,

    /** Offset in WASM memory of the 32-bit nonce length. The callback must set
     *  this to the actual nonce length. */
    nBytes: number
  ): void;
}

/** A timestamp. */
export interface MteTimestamp {
  /** Either the lower 32 bits of the timestamp or the entire timestamp if less
   *  than or equal to Number.MAX_SAFE_INTEGER. */
  ts: number,

  /** The upper 32 bits of the timestamp if not 0. If 0, the ts member contains
   *  the entire value. */
  upper: number
}

/** Signature of a timestamp callback.
 *
 *  Returns the timestamp as a string representing a 64-bit integer in
 *  decimal. */
export interface MteTimestampCallback {
  timestampCallback(): MteTimestamp;
}

/** Helpers to interface to MTE WASM.
 *
 *  To use, create a single instance of this type, then call instantiate() once
 *  on that instance to get the WASM instantiated. Once that has completed
 *  successfully, MTE objects can be created, taking reference to the single
 *  instance of this type. */
export class MteWasm {
  /** Callbacks. */
  kyberCallback: null | MteKyberCallbackWasm = null;
  entropyCallback: null | MteEntropyCallbackWasm = null;
  nonceCallback: null | MteNonceCallbackWasm = null;
  timestampCallback: null | MteTimestampCallbackWasm = null;
  /** WASM exports and memory. */
  exports: null | MteWasmExports = null;
  memory: null | WebAssembly.Memory = null;

  /** WASM page size (64 KB). */
  private readonly pageBytes: number = 64 * 1024;

  /** Heap base offset. */
  private base = 0;

  /** Heap size. */
  private bytes = 0;

  /** Blocks. */
  private blocks: MteHeapBlock[] = [];

  /** Instantiate the WASM. This should be done only once. Returns a promise
   *  that must be fulfilled before the object is usable. */
  instantiate = (): Promise<void> => {
    return new Promise(async(resolve, reject) => {
      try {
        // Set up the imports.
        const funcs = {
          mte_wasm_kyber_cb: this.kyberCallbackWasm,
          mte_wasm_ei_cb: this.entropyCallbackWasm,
          mte_wasm_n_cb: this.nonceCallbackWasm,
          mte_wasm_t_cb: this.timestampCallbackWasm
        };
        const imports = {
          env: funcs,
          imports: funcs
        };

        // Create the WASM array.
        const wasmData = new MteWasmData();

        // Instantiate the WASM using the imports.
        const wmodule = await WebAssembly.compile(wasmData.wasmArr);
        const wasm = await WebAssembly.instantiate(wmodule, imports);
        this.exports = (wasm.exports as unknown) as MteWasmExports;

        // Set the memory.
        this.memory = this.exports.memory;
        this.base = this.memory.buffer.byteLength;

        // Resolve the promise.
        resolve();
      }
      catch(err) {
        // Reject the promise on error.
        reject(err);
      }
    });
  }

  /** Allocate the given amount of memory. Returns an MteMem object that holds
   *  the memory offset in WASM and a JS buffer to access it. */
  malloc = (bytes: number): MteMem => {
    // Get the WASM memory.
    const mem = this.memory!;

    // Look for a block with enough available.
    const count = this.blocks.length;
    for (let i = 0; i < count; ++i) {
      // If the block is not in use and big enough, use it.
      if (!this.blocks[i].inUse && this.blocks[i].bytes >= bytes) {
        // If the block is bigger than needed, split it.
        if (this.blocks[i].bytes > bytes) {
          this.blocks.splice(i + 1,
                             0,
                             new MteHeapBlock(this.blocks[i].off + bytes,
                                              this.blocks[i].bytes - bytes));
          this.blocks[i].bytes = bytes;
        }

        // Return a memory object describing the block.
        const mteMem = new MteMem(this.blocks[i].off,
                                  new Uint8Array(mem.buffer,
                                                 this.blocks[i].off,
                                                 bytes));
        this.blocks[i].inUse = true;
        this.blocks[i].mteMem = mteMem;
        return mteMem;
      }
    }

    // If no blocks had enough available, the WASM memory (and therefore our
    // heap) will have to grow. Figure out how many WASM pages we need and grow.
    const prevBytes = mem.buffer.byteLength;
    const pages = Math.ceil(bytes / this.pageBytes);
    mem.grow(pages);

    // The grow operation detaches the ArrayBuffer so all existing memory
    // object buffers have to be recreated.
    for (let i = 0; i < count; ++i) {
      if (this.blocks[i].inUse) {
        this.blocks[i].mteMem!.buff = new Uint8Array(mem.buffer,
                                                     this.blocks[i].off,
                                                     this.blocks[i].bytes);
      }
    }

    // If the last block is not in use, add to it.
    const newBytes = mem.buffer.byteLength - prevBytes;
    if (this.blocks.length != 0 &&
        !this.blocks[this.blocks.length - 1].inUse) {
      this.blocks[this.blocks.length - 1].bytes += newBytes;
    }
    else {
      // Otherwise add a new block.
      this.blocks.push(new MteHeapBlock(this.base + this.bytes, newBytes));
    }
    this.bytes += newBytes;

    // Now we know we have a big enough free block. Call again to allocate it.
    return this.malloc(bytes);
  }

  /** Free the memory described by the given MteMem object. */
  free = (mem: MteMem): void => {
    // Find the block.
    let i = 0;
    const count = this.blocks.length;
    for (; i < count; ++i) {
      if (this.blocks[i].off == mem.off) {
        break;
      }
    }
    if (i == count) {
      return;
    }

    // If the previous block is not in use, combine this block back in to it.
    if (i != 0 && !this.blocks[i - 1].inUse) {
      this.blocks[i - 1].bytes += this.blocks[i].bytes;
      this.blocks.splice(i, 1);
      --i;
    }
    else {
      // Otherwise mark this block as not in use.
      this.blocks[i].inUse = false;
      this.blocks[i].mteMem = null;
    }

    // If the block following the (possibly combined in to previous) block is
    // not in use, combine that block in to this.
    if (i < this.blocks.length - 1 && !this.blocks[i + 1].inUse) {
      this.blocks[i].bytes += this.blocks[i + 1].bytes;
      this.blocks.splice(i + 1, 1);
    }
  }

  /** Convert the 4 bytes at the given WASM offset to an integer. Returns the
   *  value. */
  wasmToInt = (off: number): number => {
    // Get a byte array at the offset.
    const bytes = this.wasmOverlay(off, 4);

    // Create the integer from the little-endian bytes.
    return  bytes[0]               + // 2^0
           (bytes[1] * 0x00000100) + // 2^8
           (bytes[2] * 0x00010000) + // 2^16
           (bytes[3] * 0x01000000);  // 2^24
  }

  /** Set the 4 bytes at the given WASM offset from the given integer value. */
  intToWasm = (off: number, i: number): void => {
    // Get a byte array at the offset.
    const bytes = this.wasmOverlay(off, 4);

    // Set each byte in little-endian.
    bytes[0] =  i        & 0xff;
    bytes[1] = (i >>  8) & 0xff;
    bytes[2] = (i >> 16) & 0xff;
    bytes[3] =  i >> 24        ;
  }

  /** Allocate memory for an integer. Returns the memory object. */
  newInt = (): MteMem => {
    return this.malloc(4);
  }

  /** Convert the 8 bytes at the given WASM offset to an integer. Returns the
   *  value. */
  wasmToInt64 = (off: number): number => {
    // Get a byte array at the offset.
    const bytes = this.wasmOverlay(off, 8);

    // Create the integer from the little-endian bytes. Only the bottom 53 bits
    // should be used, so the last byte is ignored. If the value is 2^53 or
    // higher, the result will no longer be accurate.
    return  bytes[0]                       + // 2^0
           (bytes[1] * 0x0000000000000100) + // 2^8
           (bytes[2] * 0x0000000000010000) + // 2^16
           (bytes[3] * 0x0000000001000000) + // 2^24
           (bytes[4] * 0x0000000100000000) + // 2^32
           (bytes[5] * 0x0000010000000000) + // 2^40
           (bytes[6] * 0x0001000000000000);  // 2^48
  }

  /** Set the 8 bytes at the given WASM offset from the given integer value. */
  int64ToWasm = (off: number, i: number): void => {
    // Get a byte array at the offset.
    const bytes = this.wasmOverlay(off, 8);

    // Set each byte in little-endian. Only the bottom 53 bits should be used,
    // so the last byte is always zero. If the value is 2^53 or higher, the
    // result will no longer be accurate.
    for (let idx = 0; idx < 6; ++idx) {
      bytes[idx] = i & 0xff; i /= 256;
    }
    bytes[6] = i & 0xff;
    bytes[7] = 0;
  }

  /** Allocate memory for a 64-bit integer. Returns the memory object. */
  newInt64 = (): MteMem => {
    return this.malloc(8);
  }

  /** Convert the 64-bit value to a timestamp object. */
  wasmToTimestamp = (val: MteMem): MteTimestamp => {
    // If the upper 11 bits are zero, this is a safe integer so we can just read
    // it directly.
    if (val.buff![7] == 0 && (val.buff![6] & 0xE0) == 0) {
      return { ts: this.wasmToInt64(val.off), upper: 0 };
    }

    // Otherwise it has to be read as two 32-bit parts.
    return { ts: this.wasmToInt(val.off), upper: this.wasmToInt(val.off + 4) };
  }

  /** Overlay WASM memory at the given offset of the given length. Returns the
   *  array overlay. */
  wasmOverlay = (off: number, bytes: number): Uint8Array => {
    return new Uint8Array(this.memory!.buffer, off, bytes);
  }

  /** Get the array at the given WASM offset of the given length. Returns the
   *  array. */
  wasmToArr = (off: number, bytes: number): Uint8Array => {
    // Overlay.
    const overlay = this.wasmOverlay(off, bytes);

    // Copy.
    const arr = new Uint8Array(bytes);
    for (let i = 0; i < bytes; ++i) {
      arr[i] = overlay[i];
    }

    // Return the copy.
    return arr;
  }

  /** Allocate memory for an array and copy it to WASM memory. Returns the
   *  memory object. */
  arrToWasm = (arr: Uint8Array): MteMem => {
    // Allocate WASM memory.
    const mem = this.malloc(arr.length);

    // Copy.
    for (let i = 0; i < arr.length; ++i) {
      mem.buff![i] = arr[i];
    }

    // Return the memory.
    return mem;
  }

  /** Copy the given array to a WASM offset and length. */
  arrToOffLen = (arr: Uint8Array, off: number, bytes: number): void => {
    // Overlay and copy.
    const overlay = this.wasmOverlay(off, bytes);
    for (let i = 0; i < bytes; ++i) {
      overlay[i] = arr[i];
    }
  }

  /** Copy the given JS string to WASM memory. Returns the memory object. */
  strToWasm = (str: string, extra = 0): MteMem => {
    // Make sure it's a string.
    str = String(str);

    // Allocate the maximum memory this could take for UTF-8 plus a null
    // terminator and plus any extra desired buffer.
    const mem = this.malloc((str.length * 4) + 1 + extra);
    const buff = mem.buff!;

    // Convert the string to UTF-8.
    let index = 0;
    for (let i = 0; i < str.length; ++i) {
      let code = str.charCodeAt(i);
      if (code < 0x80) {
        buff[index] = code;
        ++index;
      } else if (code < 0x0800) {
        buff[index] = 0xc0 | (code >> 6);
        ++index;
        buff[index] = 0x80 | (code & 0x3f);
        ++index;
      } else if (code < 0xd800 || code >= 0xe000) {
        buff[index] = 0xe0 | (code >> 12);
        ++index;
        buff[index] = 0x80 | ((code >> 6) & 0x3f);
        ++index;
        buff[index] = 0x80 | (code & 0x3f);
        ++index;
      } else {
        code = ((code & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff) | 0x010000;
        buff[index] = 0xf0 | (code >> 18);
        ++index;
        buff[index] = 0x80 | ((code >> 12) & 0x3f);
        ++index;
        buff[index] = 0x80 | ((code >> 6) & 0x3f);
        ++index;
        buff[index] = 0x80 | (code & 0x3f);
        ++index;
      }
    }

    // Update the memory object with how much we actually wrote and return it
    // after null terminating.
    mem.used = index;
    buff[index] = 0;
    return mem;
  }

  /** Create a JS string from WASM memory. Returns the string. */
  wasmToStr = (mem: MteMem, start = 0): string => {
    // Step through the JS array overlaying the WASM memory, converting to
    // string from UTF-8. Stop at any null terminator byte even if before the
    // reported used size of the array.
    let code: number;
    let str = "";
    const buff = mem.buff!;
    for (let i = start; i < mem.used; ) {
      if (buff[i] == 0) {
        break;
      }
      else if (buff[i] < 0x80) {
        str += String.fromCharCode(buff[i]);
        ++i;
      }
      else if (buff[i] > 0xbf && buff[i] < 0xe0) {
        code = ((buff[i] & 0x1f) << 6) | (buff[i + 1] & 0x3f);
        str += String.fromCharCode(code);
        i += 2;
      }
      else if (buff[i] > 0xdf && buff[i] < 0xf0) {
        code =
          ((buff[i] & 0x0f) << 12) |
          ((buff[i + 1] & 0x3f) << 6) |
          (buff[i + 2] & 0x3f);
        str += String.fromCharCode(code);
        i += 3;
      }
      else {
        code =
          ((buff[i] & 0x07) << 18) |
          ((buff[i + 1] & 0x3f) << 12) |
          ((buff[i + 2] & 0x3f) << 6) |
          ((buff[i + 3] & 0x3f) - 0x010000);
        str += String.fromCharCode(code);
        i += 4;
      }
    }

    // Return the string.
    return str;
  }

  /** Create a JS string from the given offset in WASM memory. Returns the
   *  string. */
  wasmOffToStr = (off: number, start = 0): string => {
    const cstr = this.wasmOverlay(off, this.memory!.buffer.byteLength - off);
    return this.wasmToStr(new MteMem(-1, cstr), start);
  }

  /** Base64 encode the given array. Returns the Base64. */
  b64encode = (arr: Uint8Array): string => {
    // Copy the array to the WASM memory.
    const wasmArr = this.arrToWasm(arr);

    // Allocate WASM memory for the encode.
    const b64Bytes = this.exports!.mte_wasm_base64_encode_bytes(arr.length);
    const b64Arr = this.malloc(b64Bytes);

    // Base64 encode.
    this.exports!.mte_wasm_base64_encode(wasmArr.off, arr.length, b64Arr.off);

    // Convert to a string.
    const b64 = this.wasmToStr(b64Arr);

    // Free WASM buffers.
    this.free(wasmArr);
    this.free(b64Arr);

    // Return the Base64 string.
    return b64;
  }

  /** Base64 decode the given string. Returns the array. */
  b64decode = (b64: string): Uint8Array => {
    // Copy the string to WASM memory.
    const wasmB64 = this.strToWasm(b64);

    // Base64 decode.
    const bytes = this.exports!.mte_wasm_base64_decode(wasmB64.off);

    // Convert to an array.
    const arr = this.wasmToArr(wasmB64.off, bytes);

    // Free WASM buffers.
    this.free(wasmB64);

    // Return the array.
    return arr;
  }


  /** The Kyber callback for WASM. Calls the registered callback. */
  kyberCallbackWasm = (context: number,
                       entropy: number,
                       entropyBytes: number,
                       minEntropyBytes: number,
                       maxEntropyBytes: number): number => {
    if (this.kyberCallback === null) {
      throw new TypeError("Missing Kyber callback.");
    }
    return this.kyberCallback(context, entropy, entropyBytes,
                              minEntropyBytes, maxEntropyBytes);
  }

  /** The entropy callback for WASM. Calls the registered callback. */
  entropyCallbackWasm = (context: number,
                         minEntropy: number,
                         minLength: number,
                         maxLength: number,
                         entropyInput: number,
                         eiBytes: number): number => {
    if (this.entropyCallback === null) {
      throw new TypeError("Missing entropy callback.");
    }
    return this.entropyCallback(context,
                                minEntropy,
                                minLength,
                                maxLength,
                                entropyInput,
                                eiBytes);
  }

  /** The nonce callback for WASM. Calls the registered callback. */
  nonceCallbackWasm = (context: number,
                       minLength: number,
                       maxLength: number,
                       nonce: number,
                       nBytes: number): void => {
    if (this.nonceCallback === null) {
      throw new TypeError("Missing nonce callback.");
    }
    this.nonceCallback(context, minLength, maxLength, nonce, nBytes);
  }

  /** Timestamp callback for WASM. Calls the registered callback. */
  timestampCallbackWasm = (context: number, ts: number): void => {
    if (this.timestampCallback === null) {
      throw new TypeError("Missing timestamp callback.");
    }
    return this.timestampCallback(context, ts);
  }
}

/** A memory object usable by WASM and JS. */
export class MteMem {
  /** WASM memory offset. */
  public off: number;

  /** JS array overlaying the WASM memory. */
  public buff: Uint8Array | null;

  /** The amount of the JS array actually used. */
  public used: number;

  /** Constructor taking the WASM offset and overlaid array. The default
   *  arguments create an invalid memory object (like NULL). */
  constructor(o: number = -1, b: Uint8Array | null = null) {
    this.off = o;
    this.buff = b;
    this.used = b != null ? b.length : 0;
  }

  /* Invalidate this memory object. */
  invalidate = (): void => {
    this.off = -1;
    this.buff = null;
    this.used = 0;
  }
}

/** A heap block. */
class MteHeapBlock {
  /** True if the block is in use, false if not. */
  public inUse: boolean;

  /** The WASM memory offset. */
  public off: number;

  /** Byte length of the block. */
  public bytes: number;

  /** If the block is in use, the memory object that uses it. */
  public mteMem: MteMem | null;

  /** Constructor. The block is marked as not in use. */
  constructor(o: number, b: number) {
    this.inUse = false;
    this.off = o;
    this.bytes = b;
    this.mteMem = null;
  }
}


/** Signature of a WASM Kyber input callback. */
type MteKyberCallbackWasm = (
  /** Context. */
  context: number,

  /** Offset in WASM memory of the 32-bit offset in WASM memory of the provided
   *  array of the length given by maxEntropyBytes. The length is fixed. */
  entropy: number,

  /** Offset in WASM memory of the 32-bit length of the provided array on input;
   *  initially holds the same value as in maxEntropyBytes which equals the size
   *  of the provided buffer. The callback must set the 32-bit length of the
   *  actual entropy here. */
  entropyBytes: number,

  /** Offset in WASM memory of the 32-bit minimum entropy size;
   *  the value is for information only. It cannot be changed. */
  minEntropyBytes: number,

  /** Offset in WASM memory of the 32-bit maximum entropy size;
   *  the value is for information only. It cannot be changed. */
  maxEntropyBytes: number
) => number;

/** Signature of a WASM entropy input callback. */
type MteEntropyCallbackWasm = (
  /** Context. */
  context: number,

  /** The minimum entropy. */
  minEntropy: number,

  /** The minimum length in bytes. */
  minLength: number,

  /** The maximum length in bytes. */
  maxLength: number,

  /** Offset in WASM memory of the 32-bit offset in WASM memory of the provided
   *  array of length given by eiBytes. If larger entropy must be provided, WASM
   *  memory must be allocated and the 32-bit offset set to the offset of it. */
  entropyInput: number,

  /** Offset in WASM memory of the 32-bit length of the provided array on input;
   *  the callback must set the 32-bit length of the actual entropy here. */
  eiBytes: number
) => number;

/** Signature of a WASM nonce callback. */
type MteNonceCallbackWasm = (
  /** Context. */
  context: number,

  /** The minimum nonce length. */
  minLength: number,

  /** The maximum nonce length. */
  maxLength: number,

  /** Offset in WASM memory of the nonce array to write the nonce to. */
  nonce: number,

  /** Offset in WASM memory of the 32-bit nonce length. The callback must set
   *  this to the actual nonce length. */
  nBytes: number
) => void;

/** Signature of a WASM timestamp callback. */
type MteTimestampCallbackWasm = (
  /** Context. */
  context: number,

  /** Offset in WASM memory of the 64-bit timestamp. The callback must set this
   * to the timestamp value. */
  ts: number
) => void;

/** The WASM functions. */
interface MteWasmExports {
  /** WASM memory. */
  memory: WebAssembly.Memory;

  /** MTE WASM helper functions. */
  mte_wasm_base64_encode_bytes: (bytes: number) => number;
  mte_wasm_base64_encode: (data: number, bytes: number, buff: number) => void;
  mte_wasm_base64_decode: (buff: number) => number;

  /** MTE WASM base functions. */
  mte_base_version: () => number;
  mte_wasm_base_version_major: () => number;
  mte_wasm_base_version_minor: () => number;
  mte_wasm_base_version_patch: () => number;
  mte_wasm_base_status_count: () => number;
  mte_wasm_base_status_name: (status: MteStatus) => number;
  mte_wasm_base_status_description: (status: MteStatus) => number;
  mte_wasm_base_status_code: (name: number) => MteStatus;
  mte_base_status_is_error: (status: MteStatus) => boolean;
  mte_wasm_base_has_runtime_opts: () => boolean;
  mte_wasm_base_default_drbg: () => MteDrbgs;
  mte_wasm_base_default_tok_bytes: () => number;
  mte_wasm_base_default_verifiers: () => MteVerifiers;
  mte_wasm_base_default_cipher: () => MteCiphers;
  mte_wasm_base_default_hash: () => MteHashes;
  mte_wasm_base_drbgs_count: () => number;
  mte_wasm_base_drbgs_name: (algo: MteDrbgs) => number;
  mte_wasm_base_drbgs_algo: (name: number) => MteDrbgs;
  mte_wasm_base_drbgs_sec_strength_bytes: (algo: MteDrbgs) => number;
  mte_wasm_base_drbgs_personal_min_bytes: (algo: MteDrbgs) => number;
  mte_wasm_base_drbgs_personal_max_bytes: (algo: MteDrbgs) => number;
  mte_wasm_base_drbgs_entropy_min_bytes: (algo: MteDrbgs) => number;
  mte_wasm_base_drbgs_entropy_max_bytes: (algo: MteDrbgs) => number;
  mte_wasm_base_drbgs_nonce_min_bytes: (algo: MteDrbgs) => number;
  mte_wasm_base_drbgs_nonce_max_bytes: (algo: MteDrbgs) => number;
  mte_wasm_base_drbgs_reseed_interval: (algo: MteDrbgs) => number;
  mte_wasm_base_drbgs_incr_inst_error: (flag: boolean) => void;
  mte_wasm_base_drbgs_incr_gen_error: (flag: boolean, after: number) => void;
  mte_wasm_base_verifiers_count: () => number;
  mte_wasm_base_verifiers_name: (algo: MteVerifiers) => number;
  mte_wasm_base_verifiers_algo: (name: number) => MteVerifiers;
  mte_wasm_base_ciphers_count: () => number;
  mte_wasm_base_ciphers_name: (algo: MteCiphers) => number;
  mte_wasm_base_ciphers_algo: (name: number) => MteCiphers;
  mte_wasm_base_ciphers_block_bytes: (algo: MteCiphers) => number;
  mte_wasm_base_hashes_count: () => number;
  mte_wasm_base_hashes_name: (algo: MteHashes) => number;
  mte_wasm_base_hashes_algo: (name: number) => MteHashes;

  /** MTE WASM miscellaneous functions. */
  mte_init: (cb: number, context: number) => number;
  mte_license_init: (company: number, license: number) => boolean;

  /** MTE WASM dec functions. */
  mte_wasm_dec_state_bytes: (drbg: MteDrbgs,
                             tok_bytes: number,
                             verifiers: MteVerifiers) => number;
  mte_wasm_dec_state_init: (state: number,
                            drbg: MteDrbgs,
                            tok_bytes: number,
                            verifiers: MteVerifiers,
                            t_window: number,
                            s_window: number) => MteStatus;
  mte_wasm_dec_instantiate: (state: number,
                             ei_cb_context: number,
                             n_cb_context: number,
                             ps: number, ps_bytes: number) => MteStatus;
  mte_wasm_dec_reseed_counter: (state: number) => number;
  mte_dec_save_bytes: (state: number) => number;
  mte_wasm_dec_save_bytes_b64: (state: number) => number;
  mte_dec_state_save: (state: number, saved: number) => MteStatus;
  mte_wasm_dec_state_save_b64: (state: number, saved: number) => MteStatus;
  mte_dec_state_restore: (state: number, saved: number) => MteStatus;
  mte_wasm_dec_state_restore_b64: (state: number, saved: number) => MteStatus;
  mte_dec_buff_bytes: (state: number, encoded_bytes: number) => number;
  mte_wasm_dec_buff_bytes_b64: (state: number, encoded_bytes: number) => number;
  mte_wasm_dec_decode: (state: number,
                        t_cb_context: number,
                        encoded: number, encoded_bytes: number,
                        decoded: number,
                        decoded_off: number,
                        decoded_bytes: number,
                        enc_ts: number,
                        dec_ts: number,
                        msg_skipped: number) => MteStatus;
  mte_wasm_dec_decode_b64: (state: number,
                            t_cb_context: number,
                            encoded: number, encoded_bytes: number,
                            decoded: number,
                            decoded_off: number,
                            decoded_bytes: number,
                            enc_ts: number,
                            dec_ts: number,
                            msg_skipped: number) => MteStatus;
  mte_dec_uninstantiate: (state: number) => MteStatus;

  /** MTE WASM enc functions. */
  mte_wasm_enc_state_bytes: (drbg: MteDrbgs,
                             tok_bytes: number,
                             verifiers: MteVerifiers) => number;
  mte_wasm_enc_state_init: (state: number,
                            drbg: MteDrbgs,
                            tok_bytes: number,
                            verifiers: MteVerifiers) => MteStatus;
  mte_wasm_enc_instantiate: (state: number,
                             ei_cb_context: number,
                             n_cb_context: number,
                             ps: number, ps_bytes: number) => MteStatus;
  mte_wasm_enc_reseed_counter: (state: number) => number;
  mte_enc_save_bytes: (state: number) => number;
  mte_wasm_enc_save_bytes_b64: (state: number) => number;
  mte_enc_state_save: (state: number, saved: number) => MteStatus;
  mte_wasm_enc_state_save_b64: (state: number, saved: number) => MteStatus;
  mte_enc_state_restore: (state: number, saved: number) => MteStatus;
  mte_wasm_enc_state_restore_b64: (state: number, saved: number) => MteStatus;
  mte_enc_buff_bytes: (state: number, data_bytes: number) => number;
  mte_wasm_enc_buff_bytes_b64: (state: number, data_bytes: number) => number;
  mte_wasm_enc_encode: (state: number,
                        t_cb_context: number,
                        data: number, data_bytes: number,
                        encoded: number,
                        encoded_off: number,
                        encoded_bytes: number) => MteStatus;
  mte_wasm_enc_encode_b64: (state: number,
                            t_cb_context: number,
                            data: number,
                            data_bytes: number,
                            encoded: number,
                            encoded_off: number,
                            encoded_bytes: number) => MteStatus;
  mte_enc_uninstantiate: (state: number) => MteStatus;


  /** MTE WASM MKE dec functions. */
  mte_wasm_mke_dec_state_bytes: (drbg: MteDrbgs,
                                 tok_bytes: number,
                                 verifiers: MteVerifiers,
                                 cipher: MteCiphers,
                                 hash: MteHashes) => number;
  mte_wasm_mke_dec_state_init: (state: number,
                                drbg: MteDrbgs,
                                tok_bytes: number,
                                verifiers: MteVerifiers,
                                cipher: MteCiphers,
                                hash: MteHashes,
                                t_window: number,
                                s_window: number) => MteStatus;
  mte_wasm_mke_dec_instantiate: (state: number,
                                 ei_cb_context: number,
                                 n_cb_context: number,
                                 ps: number, ps_bytes: number) => MteStatus;
  mte_wasm_mke_dec_reseed_counter: (state: number) => number;
  mte_mke_dec_save_bytes: (state: number) => number;
  mte_wasm_mke_dec_save_bytes_b64: (state: number) => number;
  mte_mke_dec_state_save: (state: number, saved: number) => MteStatus;
  mte_wasm_mke_dec_state_save_b64: (state: number, saved: number) => MteStatus;
  mte_mke_dec_state_restore: (state: number, saved: number) => MteStatus;
  mte_wasm_mke_dec_state_restore_b64: (state: number,
                                       saved: number) => MteStatus;
  mte_mke_dec_buff_bytes: (state: number, encoded_bytes: number) => number;
  mte_wasm_mke_dec_buff_bytes_b64: (state: number,
                                    encoded_bytes: number) => number;
  mte_wasm_mke_dec_decode: (state: number,
                            t_cb_context: number,
                            encoded: number, encoded_bytes: number,
                            decoded: number,
                            decoded_off: number,
                            decoded_bytes: number,
                            enc_ts: number,
                            dec_ts: number,
                            msg_skipped: number) => MteStatus;
  mte_wasm_mke_dec_decode_b64: (state: number,
                                t_cb_context: number,
                                encoded: number, encoded_bytes: number,
                                decoded: number,
                                decoded_off: number,
                                decoded_bytes: number,
                                enc_ts: number,
                                dec_ts: number,
                                msg_skipped: number) => MteStatus;
  mte_mke_dec_decrypt_state_bytes: (state: number) => number;
  mte_mke_dec_decrypt_start: (state: number, c_state: number) => MteStatus;
  mte_wasm_mke_dec_decrypt_chunk: (state: number, c_state: number,
                                   encrypted: number, encrypted_bytes: number,
                                   decrypted: number,
                                   decrypted_bytes: number) => MteStatus;
  mte_wasm_mke_dec_decrypt_finish: (state: number, c_state: number,
                                    t_cb_context: number,
                                    decrypted_off: number,
                                    decrypted_bytes: number,
                                    enc_ts: number,
                                    dec_ts: number,
                                    msg_skipped: number) => MteStatus;
  mte_mke_dec_uninstantiate: (state: number) => MteStatus;

  /** MTE WASM MKE enc functions. */
  mte_wasm_mke_enc_state_bytes: (drbg: MteDrbgs,
                                 tok_bytes: number,
                                 verifiers: MteVerifiers,
                                 cipher: MteCiphers,
                                 hash: MteHashes) => number;
  mte_wasm_mke_enc_state_init: (state: number,
                                drbg: MteDrbgs,
                                tok_bytes: number,
                                verifiers: MteVerifiers,
                                cipher: MteCiphers,
                                hash: MteHashes) => MteStatus;
  mte_wasm_mke_enc_instantiate: (state: number,
                                 ei_cb_context: number,
                                 n_cb_context: number,
                                 ps: number, ps_bytes: number) => MteStatus;
  mte_wasm_mke_enc_reseed_counter: (state: number) => number;
  mte_mke_enc_save_bytes: (state: number) => number;
  mte_wasm_mke_enc_save_bytes_b64: (state: number) => number;
  mte_mke_enc_state_save: (state: number, saved: number) => MteStatus;
  mte_wasm_mke_enc_state_save_b64: (state: number, saved: number) => MteStatus;
  mte_mke_enc_state_restore: (state: number, saved: number) => MteStatus;
  mte_wasm_mke_enc_state_restore_b64: (state: number,
                                       saved: number) => MteStatus;
  mte_mke_enc_buff_bytes: (state: number, data_bytes: number) => number;
  mte_wasm_mke_enc_buff_bytes_b64: (state: number,
                                    data_bytes: number) => number;
  mte_wasm_mke_enc_encode: (state: number,
                            t_cb_context: number,
                            data: number, data_bytes: number,
                            encoded: number,
                            encoded_off: number,
                            encoded_bytes: number) => MteStatus;
  mte_wasm_mke_enc_encode_b64: (state: number,
                                t_cb_context: number,
                                data: number, data_bytes: number,
                                encoded: number,
                                encoded_off: number,
                                encoded_bytes: number) => MteStatus;
  mte_mke_enc_encrypt_finish_bytes: (state: number) => number;
  mte_mke_enc_encrypt_state_bytes: (state: number) => number;
  mte_mke_enc_encrypt_start: (state: number, c_state: number) => MteStatus;
  mte_wasm_mke_enc_encrypt_chunk: (state: number, c_state: number,
                                   data: number, data_bytes: number,
                                   encrypted: number) => MteStatus;
  mte_wasm_mke_enc_encrypt_finish: (state: number, c_state: number,
                                    t_cb_context: number,
                                    result_off: number,
                                    result_bytes: number) => MteStatus;
  mte_mke_enc_uninstantiate: (state: number) => MteStatus;


  /** MTE WASM Kyber functions. */
  mte_wasm_kyber_init: (strength: number) => number;
  mte_wasm_kyber_get_pubkey_size: () => number;
  mte_wasm_kyber_get_privkey_size: () => number;
  mte_wasm_kyber_get_secret_size: () => number;
  mte_wasm_kyber_get_encrypted_size: () => number;
  mte_wasm_kyber_get_min_entropy_size: () => number;
  mte_wasm_kyber_get_max_entropy_size: () => number;
  mte_wasm_kyber_get_algorithm: () => number;
  mte_wasm_kyber_create_keypair: (private_key: number,
                                  private_key_bytes: number,
                                  public_key: number,
                                  public_key_bytes: number,
                                  context: number) => number;
  mte_wasm_kyber_create_secret: (peer_public_key: number,
                                 peer_public_key_bytes: number,
                                 secret: number,
                                 secret_bytes: number,
                                 encrypted: number,
                                 encrypted_bytes: number,
                                 context: number) => number;
  mte_wasm_kyber_decrypt_secret: (private_key: number,
                                  private_key_bytes: number,
                                  encrypted: number,
                                  encrypted_bytes: number,
                                  secret: number,
                                  secret_bytes: number) => number;

}

/** Class to hold the WASM data. */
class MteWasmData {
  /** The WASM data in Base64. */
  static readonly wasmB64: string =
  "";

  /** The WASM data in a Uint8Array for WebAssembly instantiation. */
  readonly wasmArr: Uint8Array;

  /** Constructor. */
  constructor() {
    // Calculate the decoded length.
    let decBytes = Math.floor(MteWasmData.wasmB64.length / 4) * 3;
    for (let i = MteWasmData.wasmB64.length - 1; i > 0; --i) {
      if (MteWasmData.wasmB64[i] == "=") {
        --decBytes;
      }
      else {
        break;
      }
    }

    // Allocate an array to hold the decoded WASM data.
    this.wasmArr = new Uint8Array(decBytes);

    // Map the Base64 value.
    const mapB64 = (byte: number) => {
      if (byte >= 0x41 && byte <= 0x5A) { return byte - 0x41; }
      if (byte >= 0x61 && byte <= 0x7A) { return byte - 71; }
      if (byte >= 0x30 && byte <= 0x39) { return byte + 4; }
      if (byte == 0x2B) { return 62; }
      return 63;
    };

    // Convert the Base64 to bytes (possibly except a pad quad at the end).
    let b0;
    let b1;
    let b2;
    let b3;
    let b0ch;
    let b1ch;
    let b2ch;
    let b3ch;
    let binIndex = 0;
    let b64Index = 0;
    const noPad = Math.floor(decBytes / 3) * 3;
    while (binIndex < noPad) {
      // Get the quad.
      b0ch = MteWasmData.wasmB64.charCodeAt(b64Index); ++b64Index;
      b1ch = MteWasmData.wasmB64.charCodeAt(b64Index); ++b64Index;
      b2ch = MteWasmData.wasmB64.charCodeAt(b64Index); ++b64Index;
      b3ch = MteWasmData.wasmB64.charCodeAt(b64Index); ++b64Index;

      // Get the mapped value for each.
      b0 = mapB64(b0ch);
      b1 = mapB64(b1ch);
      b2 = mapB64(b2ch);
      b3 = mapB64(b3ch);

      // Assemble the 3 bytes from the quad values.
      this.wasmArr[binIndex] = ((b0       ) << 2) | (b1 >> 4); ++binIndex;
      this.wasmArr[binIndex] = ((b1 & 0x0F) << 4) | (b2 >> 2); ++binIndex;
      this.wasmArr[binIndex] = ((b2 & 0x03) << 6) | (b3     ); ++binIndex;
    }

    // Convert the padded quad.
    switch (decBytes - binIndex) {
      case 1:
        b0ch = MteWasmData.wasmB64.charCodeAt(b64Index); ++b64Index;
        b1ch = MteWasmData.wasmB64.charCodeAt(b64Index);
        b0 = mapB64(b0ch);
        b1 = mapB64(b1ch);
        this.wasmArr[binIndex] = ((b0       ) << 2) | (b1 >> 4);
        break;

      case 2:
        b0ch = MteWasmData.wasmB64.charCodeAt(b64Index); ++b64Index;
        b1ch = MteWasmData.wasmB64.charCodeAt(b64Index); ++b64Index;
        b2ch = MteWasmData.wasmB64.charCodeAt(b64Index);
        b0 = mapB64(b0ch);
        b1 = mapB64(b1ch);
        b2 = mapB64(b2ch);
        this.wasmArr[binIndex] = ((b0       ) << 2) | (b1 >> 4); ++binIndex;
        this.wasmArr[binIndex] = ((b1 & 0x0F) << 4) | (b2 >> 2);
        break;
    }
  }
}

